{"version":3,"sources":["spotify_decades.csv","CsvRow.ts","Dataset.ts","FeatureByGenreSpec.ts","FeaturesByGenreVis.tsx"],"names":["CsvRow","rawRow","i","name","artist","album_name","album_image_url","album_release_date","duration_ms","explicit","popularity","preview_url","danceability","energy","key","loudness","mode","speechiness","acousticness","instrumentalness","liveness","valence","tempo","time_signature","artist_followers","artist_genres","artist_popularity","track_id","this","audioFeatures","Dataset","data","rows","genres","genreCounts","flatMap","r","replaceAll","split","map","genre_name","trim","filter","length","reduce","counter","genre","set","get","Map","console","log","uniq","sort","aName","bName","aCount","bCount","localeCompare","year","slice","feature_name","Number","value","blob","d3","FeaturesByGenreSpec","title","yearStart","yearEnd","height","width","$schema","mark","type","values","row","includes","encoding","x","field","axis","format","y","aggregate","stack","color","FeaturesByGenreVis","dataBytes","useState","sessionStorage","getItem","setDataBytes","useEffect","fetch","dataSrc","then","resp","text","setItem","useCsvData","genreToggles","setGenreToggles","dataset","fromBlob","options","reverse","selectedGenres","Array","from","keys","Grid","container","item","xs","columnSpacing","sm","SelectGenre","selected","GenreVis","baseTitle","toGenreVisData","props","search","setSearch","filtered","toLowerCase","TextField","label","variant","onChange","e","target","GenreToggles","toggle","Switch","newToggles","checked","FormGroup","FormControlLabel","control","replace","c","toUpperCase","VegaLite","spec"],"mappings":"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","file":"static/js/4.a046bd84.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spotify_decades.d5ba62b9.csv\";","import * as d3 from \"d3\";\nimport { useEffect, useState } from \"react\";\nimport dataSrc from \"./spotify_decades.csv\";\n\nexport class CsvRow {\n  name: string = \"\";\n  artist: string = \"\";\n  album_name: string = \"\";\n  album_image_url: string = \"\";\n  album_release_date: string = \"\";\n  duration_ms: string = \"\";\n  explicit: string = \"\";\n  popularity: string = \"\";\n  preview_url: string = \"\";\n  danceability: string = \"\";\n  energy: string = \"\";\n  key: string = \"\";\n  loudness: string = \"\";\n  mode: string = \"\";\n  speechiness: string = \"\";\n  acousticness: string = \"\";\n  instrumentalness: string = \"\";\n  liveness: string = \"\";\n  valence: string = \"\";\n  tempo: string = \"\";\n  time_signature: string = \"\";\n  artist_followers: string = \"\";\n  artist_genres: string = \"\";\n  artist_popularity: string = \"\";\n  track_id: string = \"\";\n\n  [s: string]: string;\n\n  constructor(rawRow: d3.DSVRowString) {\n    for (const i in rawRow) this[i] = rawRow[i] ?? \"\";\n  }\n}\n\nexport function useCsvData() {\n  const [dataBytes, setDataBytes] = useState(\n    sessionStorage.getItem(\"dataBytes\")\n  );\n  useEffect(() => {\n    if ((dataBytes?.length ?? 0) > 0) return;\n    fetch(dataSrc)\n      .then((resp) => resp.text())\n      .then((data) => {\n        if (data) {\n          setDataBytes(data);\n          sessionStorage.setItem(\"dataBytes\", data);\n        }\n      });\n  });\n  return dataBytes;\n}\n","import * as d3 from \"d3\";\nimport { uniq } from \"lodash/fp\";\nimport { CsvRow } from \"./CsvRow\";\n\nconst audioFeatures = [\n  \"danceability\",\n  \"energy\",\n  \"speechiness\",\n  \"acousticness\",\n  \"instrumentalness\",\n  \"liveness\",\n  \"valence\",\n];\n\nexport interface GenreVisRow {\n  year: number;\n  feature_name: string;\n  value: number;\n  genres: string[];\n}\n\nexport class Dataset {\n  readonly rows: CsvRow[];\n  readonly genres: string[];\n  readonly genreCounts: Map<string, number>;\n\n  constructor(data: CsvRow[]) {\n    const genres = data.flatMap((r) =>\n      r.artist_genres // This field appears to contain a json array of strings,\n        .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n        .split(\",\")\n        .map((genre_name) => genre_name.trim())\n        .filter((genre_name) => genre_name.length > 0)\n    );\n\n    this.rows = data;\n\n    this.genreCounts = genres.reduce(\n      (counter, genre) => counter.set(genre, 1 + (counter.get(genre) ?? 0)),\n      new Map<string, number>()\n    );\n\n    console.log(this.genreCounts);\n    this.genres = uniq(genres).sort((aName, bName) => {\n      const aCount = this.genreCounts.get(aName) ?? 0;\n      const bCount = this.genreCounts.get(bName) ?? 0;\n      if (aCount === bCount) return aName.localeCompare(bName);\n      return aCount - bCount;\n    });\n  }\n\n  static fromBlob(blob: string): Dataset {\n    return new Dataset(d3.csvParse(blob).map((rawRow) => new CsvRow(rawRow)));\n  }\n\n  toGenreVisData(): GenreVisRow[] {\n    return this.rows.flatMap((r) => {\n      const year = r.album_release_date.slice(0, 4);\n      return audioFeatures.map<GenreVisRow>((feature_name) => ({\n        year: Number(year),\n        feature_name: feature_name,\n        value: r[feature_name] ? Number(r[feature_name]) : 0,\n        genres: r.artist_genres // This field appears to contain a json array of strings,\n          .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n          .split(\",\")\n          .map((genre_name) => genre_name.trim())\n          .filter((genre_name) => genre_name.length > 0),\n      }));\n    });\n  }\n}\n","import { VisualizationSpec } from \"react-vega\";\nimport { GenreVisRow } from \"./Dataset\";\n\nexport function FeaturesByGenreSpec(\n  title: string,\n  data: GenreVisRow[],\n  genres: string[],\n  yearStart: number,\n  yearEnd: number,\n  height: number = 300,\n  width: number = 800\n): VisualizationSpec {\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    mark: { type: \"area\" },\n    title: title,\n    width: width,\n    height: height,\n    data: {\n      values: data\n        .filter((row) => {\n          if (genres.length === 0) return true;\n          return row.genres.filter((name) => genres?.includes(name)).length > 0;\n        })\n        .filter((r) => r.year >= yearStart)\n        .filter((r) => r.year <= yearEnd),\n    },\n    encoding: {\n      x: {\n        field: \"year\",\n        type: \"quantitative\",\n        title: \"Year\",\n        axis: { format: \"d\" },\n      },\n      y: {\n        aggregate: \"sum\",\n        field: \"value\",\n        title: \"Feature Dominance\",\n        stack: \"normalize\",\n      },\n      color: { field: \"feature_name\", type: \"nominal\", title: \"Audio Feature\" },\n    },\n  };\n}\n","import {\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  Switch,\n  TextField,\n} from \"@mui/material\";\nimport { uniq } from \"lodash/fp\";\nimport { useState } from \"react\";\nimport { VegaLite } from \"react-vega\";\nimport { useCsvData } from \"./CsvRow\";\nimport { Dataset, GenreVisRow } from \"./Dataset\";\nimport { FeaturesByGenreSpec } from \"./FeatureByGenreSpec\";\n\nexport function FeaturesByGenreVis() {\n  const dataBytes = useCsvData();\n  const [genreToggles, setGenreToggles] = useState(new Map<string, boolean>());\n\n  if (!dataBytes) return <p>Loading...</p>;\n  const dataset = Dataset.fromBlob(dataBytes);\n\n  const options = dataset.genres.reverse();\n  const selectedGenres = Array.from(genreToggles.keys()).filter((name) =>\n    genreToggles.get(name)\n  );\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <h2>Genres</h2>\n      </Grid>\n      <Grid container columnSpacing={2}>\n        <Grid item sm={2}>\n          <SelectGenre\n            genreToggles={genreToggles}\n            setGenreToggles={setGenreToggles}\n            options={options}\n            selected={selectedGenres}\n          />\n        </Grid>\n        <Grid item sm={10}>\n          <GenreVis\n            baseTitle={\"Variation in Features\"}\n            data={dataset.toGenreVisData()}\n            genres={selectedGenres}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction SelectGenre(props: {\n  genreToggles: Map<string, boolean>;\n  setGenreToggles: (val: Map<string, boolean>) => void;\n  options: string[];\n  selected: string[];\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const filtered = props.options\n    .filter((name) => name && name.toLowerCase().includes(search))\n    .slice(0, 5);\n  const options = uniq([...filtered, ...props.selected]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <TextField\n          label=\"search genres\"\n          variant=\"standard\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <h4>Top matches</h4>\n        <GenreToggles\n          genreToggles={props.genreToggles}\n          setGenreToggles={props.setGenreToggles}\n          options={options}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction GenreToggles(props: {\n  genreToggles: Map<string, boolean>;\n  setGenreToggles: (val: Map<string, boolean>) => void;\n  options: string[];\n}) {\n  function toggle(name: string) {\n    return (\n      <Switch\n        value={props.genreToggles.get(name)}\n        onChange={(e) => {\n          const newToggles = new Map(props.genreToggles);\n          newToggles.set(name, e.target.checked);\n          props.setGenreToggles(newToggles);\n        }}\n      />\n    );\n  }\n\n  return (\n    <FormGroup>\n      {props.options.map((name) => (\n        <FormControlLabel key={name} control={toggle(name)} label={name} />\n      ))}\n    </FormGroup>\n  );\n}\n\nfunction GenreVis(props: {\n  baseTitle: string;\n  data: GenreVisRow[];\n  genres?: string[];\n  yearStart?: number;\n  yearEnd?: number;\n}) {\n  const yearStart = props.yearStart ?? 0;\n  const yearEnd = props.yearEnd ?? 3000;\n\n  let title = props.baseTitle;\n  if (props.genres && props.genres.length > 0)\n    title += \" | \" + props.genres[0].replace(/^\\w/, (c) => c.toUpperCase());\n  if (props.genres && props.genres.length > 1) title += \", and others\";\n\n  return (\n    <VegaLite\n      spec={FeaturesByGenreSpec(\n        title,\n        props.data,\n        props.genres ?? [],\n        yearStart,\n        yearEnd\n      )}\n    />\n  );\n}\n\nexport default FeaturesByGenreVis;\n"],"sourceRoot":""}