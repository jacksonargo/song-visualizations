{"version":3,"sources":["DataFilter.ts","FeatureByGenreSpec.ts","FeaturesByGenreVis.tsx"],"names":["DataFilter","props","genreToggles","yearStart","yearEnd","this","FeaturesByGenreSpec","decades","uniq","data","map","r","decade","sort","$schema","mark","type","width","height","values","encoding","x","field","title","axis","format","scale","domain","y","aggregate","stack","color","FeaturesByGenreVis","filter","Box","VegaLite","spec","dataset","toGenreVisRow"],"mappings":"gLAQaA,EAIX,WAAYC,GAAyB,IAAD,6BAHpCC,kBAGoC,OAFpCC,eAEoC,OADpCC,aACoC,EAClCC,KAAKF,UAAL,UAAiBF,EAAME,iBAAvB,QAAoC,KACpCE,KAAKF,UAAYE,KAAKF,UAAY,KAAOE,KAAKF,UAAY,KAC1DE,KAAKD,QAAL,UAAeH,EAAME,iBAArB,QAAkC,KAClCE,KAAKD,QAAUC,KAAKD,QAAU,KAAOC,KAAKD,QAAU,KACpDC,KAAKH,aAAeD,EAAMC,e,2ICbvB,SAASI,EAAoBL,GAOlC,IAAMM,EAAUC,eAAKP,EAAMQ,KAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEC,WAASC,OAEtD,MAAO,CACLC,QAAS,kDACTC,KAAM,CAAEC,KAAM,QACdC,MAAOhB,EAAMgB,MACbC,OAAQjB,EAAMiB,OACdT,KAAM,CACJU,OAAQlB,EAAMQ,MAEhBW,SAAU,CACRC,EAAG,CACDC,MAAO,OACPN,KAAM,eACNO,MAAO,OACPC,KAAM,CAAEC,OAAQ,IAAKN,OAAQX,eAAKD,IAClCmB,MAAO,CAAEC,OAAQ,CAAC1B,EAAME,UAAWF,EAAMG,WAE3CwB,EAAG,CACDC,UAAW,MACXP,MAAO,QACPC,MAAO,oBACPO,MAAO,aAETC,MAAO,CAAET,MAAO,eAAgBN,KAAM,UAAWO,MAAO,mB,WCvBvD,SAASS,EAAmB/B,GACjC,IAAMgC,EAAS,IAAIjC,IAAWC,GAC9B,OACE,cAACiC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAM9B,EAAoB,uCACrBL,GACAgC,GAFoB,IAGvBxB,KAAMR,EAAMoC,QAAQC,cAAcL,UAO7BD","file":"static/js/5.7df7a109.chunk.js","sourcesContent":["import { GenreToggleMap } from \"./GenreToggles\";\n\nexport interface DataFilterProps {\n  genreToggles: GenreToggleMap;\n  yearStart?: number;\n  yearEnd?: number;\n}\n\nexport class DataFilter {\n  genreToggles: GenreToggleMap;\n  yearStart: number;\n  yearEnd: number;\n  constructor(props: DataFilterProps) {\n    this.yearStart = props.yearStart ?? 1950;\n    this.yearStart = this.yearStart > 1950 ? this.yearStart : 1950;\n    this.yearEnd = props.yearStart ?? 2025;\n    this.yearEnd = this.yearEnd < 2025 ? this.yearEnd : 2025;\n    this.genreToggles = props.genreToggles;\n  }\n}\n","import { VisualizationSpec } from \"react-vega\";\nimport { GenreVisRow } from \"./Dataset\";\nimport { uniq } from \"lodash/fp\";\n\nexport function FeaturesByGenreSpec(props: {\n  data: GenreVisRow[];\n  height: number;\n  width: number;\n  yearStart: number;\n  yearEnd: number;\n}): VisualizationSpec {\n  const decades = uniq(props.data.map((r) => r.decade)).sort();\n\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    mark: { type: \"area\" },\n    width: props.width,\n    height: props.height,\n    data: {\n      values: props.data,\n    },\n    encoding: {\n      x: {\n        field: \"year\",\n        type: \"quantitative\",\n        title: \"Year\",\n        axis: { format: \"d\", values: uniq(decades) },\n        scale: { domain: [props.yearStart, props.yearEnd] },\n      },\n      y: {\n        aggregate: \"sum\",\n        field: \"value\",\n        title: \"Feature Dominance\",\n        stack: \"normalize\",\n      },\n      color: { field: \"feature_name\", type: \"nominal\", title: \"Audio Feature\" },\n    },\n  };\n}\n","import { Box } from \"@mui/material\";\nimport { VegaLite } from \"react-vega\";\nimport { DataFilter, DataFilterProps } from \"./DataFilter\";\nimport { Dataset } from \"./Dataset\";\nimport { FeaturesByGenreSpec } from \"./FeatureByGenreSpec\";\n\nexport interface FeaturesByGenreVisProps extends DataFilterProps {\n  height: number;\n  width: number;\n  dataset: Dataset;\n}\n\nexport function FeaturesByGenreVis(props: FeaturesByGenreVisProps) {\n  const filter = new DataFilter(props);\n  return (\n    <Box>\n      <VegaLite\n        spec={FeaturesByGenreSpec({\n          ...props,\n          ...filter,\n          data: props.dataset.toGenreVisRow(filter),\n        })}\n      />\n    </Box>\n  );\n}\n\nexport default FeaturesByGenreVis;\n"],"sourceRoot":""}