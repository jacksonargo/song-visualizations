{"version":3,"sources":["spec/artists/SingleDecadeBarsSpec.ts","spec/artists/SingleDecadeDonutSpec.ts","components/ArtistsByDecadeChart.tsx","components/ArtistsSummaryChart.tsx","spec/artists/SummaryBarChartSpec.ts","spec/features/AreaChartSpec.ts","components/FeaturesAreaChart.tsx","spec/features/DonutChartSpec.ts","components/FeaturesDonutChart.tsx","spec/features/RadarChartSpec.ts","components/FeaturesRadarChart.tsx","data/spotify_decades.csv","data/CsvRow.ts","data/Dataset.ts","components/Toggles.tsx","components/SelectFeature.tsx","components/SelectGenre.tsx","data/Filter.ts","App.tsx","index.js"],"names":["SingleDecadeBarsSpec","props","$schema","mark","type","tooltip","data","values","width","height","encoding","x","field","axis","title","y","sort","color","SingleDecadeDonutSpec","radius","innerRadius","textRadius","layer","padAngle","theta","stack","text","ArtistsByDecadeChart","show","Box","rollup","dataset","toArtistsVisRow","filter","r","artist","decadeGrouping","d3","decade","initSummary","name","distinctArtists","genres","count","summarize","a","b","uniq","artistsSummary","topArtists","Array","from","entries","forEach","sorted","reverse","decadeTopArtists","slice","topN","summaryTop","reduce","summaryOthers","push","decades","map","Grid","container","item","xs","md","VegaLite","spec","ArtistsSummaryChart","BarChart","rollupData","margin","visRef","useRef","useEffect","svg","iWidth","left","right","iHeight","top","bottom","yAttr","domain","keys","n","toString","padding","line","d","bandwidth","ref","current","append","attr","g","selectAll","join","datum","style","call","SummaryBarChartSpec","remove","AreaChartSpec","format","scale","yearStart","yearEnd","aggregate","FeaturesAreaChart","unpivotFeatures","DonutChartSpec","FeaturesDonutChart","hidden","featureData","reduceGroup","grouping","value","length","feature_name","featureName","RadarChartSpec","description","autosize","contains","signals","update","source","transform","groupby","scales","range","signal","zero","nice","domainMin","scheme","encode","enter","marks","zindex","facet","interpolate","stroke","strokeWidth","fill","fillOpacity","align","baseline","x2","y2","test","fontWeight","FeaturesRadarChart","key","category","val","CsvRow","rawRow","i","album_name","album_image_url","album_release_date","duration_ms","explicit","popularity","preview_url","danceability","energy","loudness","mode","speechiness","acousticness","instrumentalness","liveness","valence","tempo","time_signature","artist_followers","artist_genres","artist_popularity","track_id","this","Number","year","replaceAll","split","genre_name","trim","AudioFeatures","AudioFeatureDefinitions","Object","freeze","useData","dataBytes","useState","sessionStorage","getItem","setDataBytes","fetch","dataSrc","then","resp","setItem","useCsvData","undefined","setDataset","dataBlob","Dataset","rows","genreCounts","filterCache","Map","flatMap","counter","genre","set","get","aName","bName","aCount","bCount","localeCompare","selectedGenres","genreToggles","selection","row","isEmpty","intersection","selectedFeatures","featureToggles","selectCSVRows","artistGrouping","sum","Toggles","selected","ToggleSwitch","Checkbox","checked","toggles","onChange","e","newToggles","target","setToggles","SelectFeature","label","Tooltip","placement","Stack","FormControlLabel","control","SelectGenre","search","setSearch","matches","options","toLowerCase","includes","selectedToggles","FormGroup","TextField","variant","minYear","maxYear","Filter","loadingMessage","App","setGenreToggles","useFeatureToggles","setFeatureToggles","showVariationAreaVis","setShowVariationAreaVis","showVariationsRadarVis","setShowVariationsRadarVis","showTopArtistsOverallBar","setShowTopArtistsOverallBar","showTopArtistsByDecadeBar","setShowTopArtistsByDecadeBars","fallback","Container","maxWidth","columnSpacing","overflow","position","textAlign","Switch","justifyContent","spacing","List","ListItem","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b80525c8.chunk.js","sourcesContent":["import { VisualizationSpec } from \"react-vega\";\nimport { ArtistsVisRow } from \"../../data/Dataset\";\n\nexport function SingleDecadeBarsSpec(props: {\n  data: ArtistsVisRow[];\n  height: number;\n  width: number;\n}): VisualizationSpec {\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    mark: { type: \"bar\", tooltip: true },\n    data: { values: props.data },\n    width: props.width,\n    height: props.height,\n    encoding: {\n      x: {\n        field: \"count\",\n        type: \"quantitative\",\n        axis: { title: \"Number of Top Hits\" },\n      },\n      y: {\n        field: \"artist\",\n        type: \"nominal\",\n        axis: { title: \"\" },\n        sort: \"-x\",\n      },\n      color: {\n        field: \"artist\",\n        type: \"nominal\",\n        sort: \"-x\",\n      },\n    },\n  };\n}\n","import { VisualizationSpec } from \"react-vega\";\nimport { ArtistsVisRow } from \"../../data/Dataset\";\n\nexport function SingleDecadeDonutSpec(props: {\n  data: ArtistsVisRow[];\n  height: number;\n  width: number;\n  innerRadius?: number;\n  radius?: number;\n  padAngle?: number;\n}): VisualizationSpec {\n  const radius = props.radius ?? 120;\n  const innerRadius = props.innerRadius ?? 60;\n  const textRadius = (radius - innerRadius) / 2 + innerRadius;\n  const padAngle = props.innerRadius ?? 0.01;\n\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    layer: [\n      {\n        mark: { type: \"arc\", tooltip: true, radius, innerRadius, padAngle },\n        encoding: {\n          theta: { type: \"quantitative\", field: \"count\", stack: true },\n          color: {\n            field: \"artist\",\n            type: \"nominal\",\n          },\n        },\n      },\n      {\n        mark: { type: \"text\", radius: textRadius },\n        encoding: {\n          theta: { type: \"quantitative\", field: \"count\", stack: true },\n          text: { type: \"nominal\", field: \"artist\" },\n        },\n      },\n    ],\n    data: { values: props.data },\n    width: props.width,\n    height: props.height,\n  };\n}\n","import { Box, Grid } from \"@mui/material\";\nimport * as d3 from \"d3\";\nimport { uniq } from \"lodash/fp\";\nimport { VegaLite } from \"react-vega\";\nimport { ArtistsVisRow, Dataset } from \"../data/Dataset\";\nimport { Filter } from \"../data/Filter\";\nimport { SingleDecadeBarsSpec } from \"../spec/artists/SingleDecadeBarsSpec\";\nimport { SingleDecadeDonutSpec } from \"../spec/artists/SingleDecadeDonutSpec\";\n\nexport interface TopArtistsByDecadeVisProps {\n  dataset: Dataset;\n  innerRadius?: number;\n  padAngle?: number;\n  height: number;\n  width: number;\n  topN: number;\n  show: boolean;\n  filter: Filter;\n}\n\nexport function ArtistsByDecadeChart(props: TopArtistsByDecadeVisProps) {\n  if (!props.show) return <Box />;\n\n  const rollup = props.dataset\n    .toArtistsVisRow(props.filter)\n    .filter((r) => r.artist !== \"\");\n  const decadeGrouping = d3.group(rollup, (r) => r.decade);\n\n  const initSummary = (decade: number, name: string): ArtistsVisRow => ({\n    decade: decade,\n    distinctArtists: 0,\n    artist: name,\n    genres: [] as string[],\n    count: 0,\n  });\n\n  const summarize = (a: ArtistsVisRow, b: ArtistsVisRow) => ({\n    ...a,\n    count: a.count + b.count,\n    distinctArtists: a.distinctArtists + b.distinctArtists,\n    genres: uniq([...a.genres, ...b.genres]),\n  });\n\n  const artistsSummary: ArtistsVisRow[] = [];\n  const topArtists: ArtistsVisRow[] = [];\n  Array.from(decadeGrouping.entries()).forEach(([decade, grouping]) => {\n    const sorted = grouping.sort((a, b) => a.count - b.count).reverse();\n\n    const decadeTopArtists = sorted.slice(0, props.topN);\n    const summaryTop = decadeTopArtists.reduce(\n      summarize,\n      initSummary(decade, `Top ${props.topN}`)\n    );\n\n    const decodeOther = sorted.slice(props.topN, -1);\n    const summaryOthers = decodeOther.reduce(\n      summarize,\n      initSummary(decade, \"Others\")\n    );\n\n    artistsSummary.push(summaryOthers);\n    artistsSummary.push(summaryTop);\n    topArtists.push(...decadeTopArtists);\n  });\n\n  const decades = uniq(topArtists.map((r) => r.decade)).sort();\n  return (\n    <Box>\n      {decades.map((decade) => (\n        <Grid key={decade} container>\n          <Grid item xs={12}>\n            <h3>\n              {decade} - {decade + 10}\n            </h3>\n          </Grid>\n          <Grid item md={6}>\n            <h4>\n              How many tops hits were produced by the top {props.topN} artists?\n            </h4>\n            <VegaLite\n              width={350}\n              spec={SingleDecadeDonutSpec({\n                ...props,\n                data: artistsSummary.filter((r) => r.decade === decade),\n              })}\n            />\n          </Grid>\n          <Grid item md={6}>\n            <VegaLite\n              width={350}\n              spec={SingleDecadeBarsSpec({\n                ...props,\n                data: topArtists.filter((r) => r.decade === decade),\n              })}\n            />\n          </Grid>\n        </Grid>\n      ))}\n    </Box>\n  );\n}\n","import { Box } from \"@mui/material\";\nimport React, { useEffect, useRef } from \"react\";\nimport { ArtistsVisRow, Dataset } from \"../data/Dataset\";\nimport { Filter } from \"../data/Filter\";\nimport { SummaryBarChartSpec } from \"../spec/artists/SummaryBarChartSpec\";\n\nexport function ArtistsSummaryChart(props: {\n  dataset: Dataset;\n  filter: Filter;\n  show: boolean;\n  yearStart?: number;\n  yearEnd?: number;\n  height: number;\n  width: number;\n  margin: { left: number; right: number; top: number; bottom: number };\n}) {\n  if (!props.show) return <Box />;\n\n  const rollup = props.dataset\n    .toArtistsVisRow(props.filter)\n    .filter((r) => r.distinctArtists > 1);\n\n  rollup.sort((a, b) => a.decade - b.decade);\n\n  return (\n    <Box>\n      <BarChart\n        rollupData={rollup}\n        height={props.height}\n        width={props.width}\n        margin={props.margin}\n      />\n    </Box>\n  );\n}\n\nfunction BarChart(props: {\n  rollupData: ArtistsVisRow[];\n  height: number;\n  width: number;\n  margin: { left: number; right: number; top: number; bottom: number };\n}) {\n  const visRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    const svg = SummaryBarChartSpec({ ref: visRef, ...props });\n    return () => {\n      svg.remove();\n    };\n  });\n  return <div ref={visRef} />;\n}\n","import * as d3 from \"d3\";\nimport { RefObject } from \"react\";\nimport { ArtistsVisRow } from \"../../data/Dataset\";\n\nexport function SummaryBarChartSpec(props: {\n  rollupData: ArtistsVisRow[];\n  ref: RefObject<HTMLDivElement>;\n  height: number;\n  width: number;\n  margin: { left: number; right: number; top: number; bottom: number };\n}) {\n  const iWidth = props.width - props.margin.left - props.margin.right;\n  const iHeight = props.height - props.margin.top - props.margin.bottom;\n\n  const data = props.rollupData;\n\n  const xAttr = \"decade\";\n  const yAttr = \"distinctArtists\";\n\n  const x = d3\n    .scaleBand([0, iWidth])\n    .domain(\n      Array.from(new Array(8).keys())\n        .map((n) => 1950 + n * 10)\n        .map((x) => x.toString())\n    )\n    .padding(0.05);\n\n  const y = d3.scaleLinear([iHeight, 0]).domain([0, 210]);\n\n  const line = d3\n    .line<ArtistsVisRow>()\n    .x((d) => (x(d[xAttr].toString()) ?? 0) + x.bandwidth() / 2)\n    .y((d) => y(d.distinctArtists));\n\n  const div = d3.select(props.ref.current);\n  const svg = div\n    .append(\"svg\")\n    .attr(\"viewBox\", `0 0 ${props.width} ${props.height}`);\n\n  const g = svg\n    .append(\"g\")\n    .attr(\"transform\", `translate(${props.margin.left}, ${props.margin.top})`);\n\n  g.selectAll(\"rect\")\n    .data(data)\n    .join(\"rect\")\n    .attr(\"x\", (d) => x(d[xAttr].toString()) ?? 0)\n    .attr(\"width\", () => x.bandwidth())\n    .attr(\"y\", (d) => y(d[yAttr]))\n    .attr(\"height\", (d) => iHeight - y(d[yAttr]))\n    .attr(\"fill\", \"#adc2eb\");\n\n  g.selectAll(\".point\")\n    .data(data)\n    .join(\"circle\")\n    .attr(\"class\", \"point\")\n    .attr(\"cx\", (d) => (x(d[xAttr].toString()) ?? 0) + x.bandwidth() / 2)\n    .attr(\"cy\", (d) => y(d[yAttr]))\n    .attr(\"r\", 2)\n    .attr(\"fill\", \"black\");\n\n  g.append(\"path\")\n    .datum(data)\n    .attr(\"d\", (d) => line(d))\n    .attr(\"fill\", \"none\")\n    .attr(\"class\", \"line\")\n    .attr(\"stroke\", \"steelblue\")\n    .attr(\"stroke-width\", 1.5);\n\n  g.selectAll(\".countText\")\n    .data(data)\n    .join(\"text\")\n    .text((d) => d.distinctArtists)\n    .attr(\"class\", \"countText\")\n    .attr(\"text-anchor\", \"middle\")\n    .attr(\"x\", (d) => (x(d[xAttr].toString()) ?? 0) + x.bandwidth() / 2)\n    .attr(\"y\", (d) => y(d[yAttr]) - 15);\n\n  g.append(\"g\")\n    .attr(\"transform\", `translate(0, ${iHeight})`)\n    .style(\"font-size\", \"small\")\n    .call(d3.axisBottom(x));\n\n  return svg;\n}\n","import { uniq } from \"lodash/fp\";\nimport { VisualizationSpec } from \"react-vega\";\nimport { FeaturesRow } from \"../../data/Dataset\";\n\nexport function AreaChartSpec(props: {\n  data: FeaturesRow[];\n  height: number;\n  width: number;\n  yearStart: number;\n  yearEnd: number;\n}): VisualizationSpec {\n  const decades = uniq(props.data.map((r) => r.decade)).sort();\n\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    mark: { type: \"area\" },\n    width: props.width,\n    height: props.height,\n    data: { values: props.data },\n    encoding: {\n      x: {\n        field: \"year\",\n        type: \"quantitative\",\n        title: \"Year\",\n        axis: { format: \"d\", values: uniq(decades) },\n        scale: { domain: [props.yearStart, props.yearEnd] },\n      },\n      y: {\n        aggregate: \"sum\",\n        field: \"value\",\n        title: \"Feature Dominance\",\n        stack: \"normalize\",\n      },\n      color: { field: \"feature_name\", type: \"nominal\", title: \"Audio Feature\" },\n    },\n  };\n}\n","import { Box } from \"@mui/material\";\nimport { VegaLite } from \"react-vega\";\nimport { Filter } from \"../data/Filter\";\nimport { Dataset } from \"../data/Dataset\";\nimport { AreaChartSpec } from \"../spec/features/AreaChartSpec\";\n\nexport interface FeaturesAreaChartProps {\n  filter: Filter;\n  height: number;\n  width: number;\n  dataset: Dataset;\n  show: boolean;\n}\n\nexport function FeaturesAreaChart(props: FeaturesAreaChartProps) {\n  if (!props.show) return <Box />;\n  return (\n    <Box>\n      <VegaLite\n        spec={AreaChartSpec({\n          ...props,\n          ...props.filter,\n          data: props.dataset.unpivotFeatures(props.filter),\n        })}\n      />\n    </Box>\n  );\n}\n","import { VisualizationSpec } from \"react-vega\";\n\nexport function DonutChartSpec(props: {\n  data: { value: number; featureName: string }[];\n  height: number;\n  width: number;\n  innerRadius?: number;\n  radius?: number;\n  padAngle?: number;\n}): VisualizationSpec {\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    data: { values: props.data },\n    width: props.width,\n    height: props.height,\n    mark: { type: \"bar\", tooltip: true },\n    encoding: {\n      x: { type: \"quantitative\", field: \"value\" },\n      y: { type: \"nominal\", field: \"featureName\" },\n      color: { type: \"nominal\", field: \"featureName\" },\n    },\n  };\n}\n","import { Box } from \"@mui/material\";\nimport * as d3 from \"d3\";\nimport { VegaLite } from \"react-vega\";\nimport { Dataset, FeaturesRow } from \"../data/Dataset\";\nimport { Filter } from \"../data/Filter\";\nimport { DonutChartSpec } from \"../spec/features/DonutChartSpec\";\n\nexport function FeaturesDonutChart(props: {\n  hidden: boolean;\n  dataset: Dataset;\n  filter: Filter;\n  height: number;\n  width: number;\n}) {\n  if (props.hidden) return <div />;\n\n  const featureData = props.dataset.unpivotFeatures(props.filter);\n  const reduceGroup = (grouping: FeaturesRow[]) =>\n    grouping.map((r) => r.value).reduce((a, b) => a + b) / grouping.length;\n  const data = d3\n    .flatGroup(featureData, (r) => r.feature_name)\n    .map(([featureName, grouping]) => ({\n      featureName: featureName,\n      value: reduceGroup(grouping),\n    }));\n\n  return (\n    <Box>\n      <VegaLite spec={DonutChartSpec({ ...props, data })} />\n    </Box>\n  );\n}\n","import { VisualizationSpec } from \"react-vega\";\n\nexport interface RadarChartData {\n  key: string;\n  value: number;\n  category: number;\n}\n\nexport function RadarChartSpec(props: {\n  data: RadarChartData[];\n  height: number;\n  width: number;\n  padding: number;\n}): VisualizationSpec {\n  return {\n    $schema: \"https://vega.github.io/schema/vega/v5.json\",\n    description:\n      \"A radar chart example, showing multiple dimensions in a radial layout.\",\n    width: props.width,\n    height: props.height,\n    padding: props.padding,\n    autosize: { type: \"none\", contains: \"padding\" },\n    signals: [{ name: \"radius\", update: \"width / 2\" }],\n    data: [\n      {\n        name: \"table\",\n        values: props.data,\n      },\n      {\n        name: \"keys\",\n        source: \"table\",\n        transform: [\n          {\n            type: \"aggregate\",\n            groupby: [\"key\"],\n          },\n        ],\n      },\n    ],\n\n    scales: [\n      {\n        name: \"angular\",\n        type: \"point\",\n        //@ts-ignore\n        range: { signal: \"[-PI,PI]\" },\n        padding: 0.5,\n        domain: { data: \"table\", field: \"key\" },\n      },\n      {\n        name: \"radial\",\n        type: \"linear\",\n        range: { signal: \"[0, radius]\" },\n        zero: true,\n        nice: false,\n        domain: { data: \"table\", field: \"value\" },\n        domainMin: 0,\n      },\n      {\n        name: \"color\",\n        type: \"ordinal\",\n        domain: { data: \"table\", field: \"category\" },\n        range: { scheme: \"category10\" },\n      },\n    ],\n\n    encode: {\n      enter: {\n        x: { signal: \"radius\" },\n        y: { signal: \"radius\" },\n      },\n    },\n\n    marks: [\n      {\n        type: \"group\",\n        name: \"categories\",\n        zindex: 1,\n        from: {\n          facet: { data: \"table\", name: \"facet\", groupby: [\"category\"] },\n        },\n        marks: [\n          {\n            type: \"line\",\n            name: \"category-line\",\n            from: { data: \"facet\" },\n            encode: {\n              enter: {\n                interpolate: { value: \"linear-closed\" },\n                x: {\n                  signal:\n                    \"scale('radial', datum.value) * cos(scale('angular', datum.key))\",\n                },\n                y: {\n                  signal:\n                    \"scale('radial', datum.value) * sin(scale('angular', datum.key))\",\n                },\n                stroke: { scale: \"color\", field: \"category\" },\n                strokeWidth: { value: 1 },\n                fill: { scale: \"color\", field: \"category\" },\n                fillOpacity: { value: 0.1 },\n              },\n            },\n          },\n          {\n            type: \"text\",\n            name: \"value-text\",\n            from: { data: \"category-line\" },\n            encode: {\n              enter: {\n                x: { signal: \"datum.x\" },\n                y: { signal: \"datum.y\" },\n                text: { signal: \"datum.datum.value\" },\n                align: { value: \"center\" },\n                baseline: { value: \"middle\" },\n                fill: { value: \"black\" },\n              },\n            },\n          },\n        ],\n      },\n      {\n        type: \"rule\",\n        name: \"radial-grid\",\n        from: { data: \"keys\" },\n        zindex: 0,\n        encode: {\n          enter: {\n            x: { value: 0 },\n            y: { value: 0 },\n            x2: { signal: \"radius * cos(scale('angular', datum.key))\" },\n            y2: { signal: \"radius * sin(scale('angular', datum.key))\" },\n            stroke: { value: \"lightgray\" },\n            strokeWidth: { value: 1 },\n          },\n        },\n      },\n      {\n        type: \"text\",\n        name: \"key-label\",\n        from: { data: \"keys\" },\n        zindex: 1,\n        encode: {\n          enter: {\n            x: { signal: \"(radius + 5) * cos(scale('angular', datum.key))\" },\n            y: { signal: \"(radius + 5) * sin(scale('angular', datum.key))\" },\n            text: { field: \"key\" },\n            align: [\n              {\n                test: \"abs(scale('angular', datum.key)) > PI / 2\",\n                value: \"right\",\n              },\n              {\n                value: \"left\",\n              },\n            ],\n            baseline: [\n              {\n                test: \"scale('angular', datum.key) > 0\",\n                value: \"top\",\n              },\n              {\n                test: \"scale('angular', datum.key) == 0\",\n                value: \"middle\",\n              },\n              {\n                value: \"bottom\",\n              },\n            ],\n            fill: { value: \"black\" },\n            fontWeight: { value: \"bold\" },\n          },\n        },\n      },\n      {\n        type: \"line\",\n        name: \"outer-line\",\n        from: { data: \"radial-grid\" },\n        encode: {\n          enter: {\n            interpolate: { value: \"linear-closed\" },\n            x: { field: \"x2\" },\n            y: { field: \"y2\" },\n            stroke: { value: \"lightgray\" },\n            strokeWidth: { value: 1 },\n          },\n        },\n      },\n    ],\n  };\n}\n","import { Box, Grid } from \"@mui/material\";\nimport * as d3 from \"d3\";\nimport { uniq } from \"lodash/fp\";\nimport { VegaLite } from \"react-vega\";\nimport { Dataset } from \"../data/Dataset\";\nimport { Filter } from \"../data/Filter\";\nimport {\n  RadarChartData,\n  RadarChartSpec,\n} from \"../spec/features/RadarChartSpec\";\n\nexport interface RadarChartVisProps {\n  height: number;\n  width: number;\n  dataset: Dataset;\n  padding: number;\n  show: boolean;\n  filter: Filter;\n}\n\nexport function FeaturesRadarChart(props: RadarChartVisProps) {\n  if (!props.show) return <Box />;\n\n  const data = props.dataset\n    .unpivotFeatures(props.filter)\n    .map<RadarChartData>((r) => ({\n      key: r.feature_name,\n      category: r.decade,\n      value: r.value,\n    }));\n\n  const rollup: RadarChartData[] = d3\n    .flatGroup(\n      data,\n      (r) => r.category,\n      (r) => r.key\n    )\n    .map(([category, key, grouping]) => ({\n      category,\n      key,\n      value: grouping.reduce((val, x) => val + x.value, 0),\n    }));\n\n  const decades = uniq(rollup.map((r) => r.category)).sort();\n  return (\n    <Box>\n      <Grid container>\n        {decades.map((decade) => (\n          <Grid key={decade} item md={6}>\n            <h3>{decade}</h3>\n            <VegaLite\n              spec={RadarChartSpec({\n                ...props,\n                data: rollup.filter((r) => decade === r.category),\n              })}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/spotify_decades.d5ba62b9.csv\";","import * as d3 from \"d3\";\nimport { useEffect, useState } from \"react\";\nimport dataSrc from \"./spotify_decades.csv\";\n\nexport interface CsvRowSchema {\n  name?: string;\n  artist?: string;\n  album_name?: string;\n  album_image_url?: string;\n  album_release_date?: string;\n  duration_ms?: string;\n  explicit?: string;\n  popularity?: string;\n  preview_url?: string;\n  danceability?: string;\n  energy?: string;\n  key?: string;\n  loudness?: string;\n  mode?: string;\n  speechiness?: string;\n  acousticness?: string;\n  instrumentalness?: string;\n  liveness?: string;\n  valence?: string;\n  tempo?: string;\n  time_signature?: string;\n  artist_followers?: string;\n  artist_genres?: string;\n  artist_popularity?: string;\n  track_id?: string;\n  [s: string]: string | undefined;\n}\n\nexport class CsvRow {\n  name: string = \"\";\n  artist: string = \"\";\n  album_name: string = \"\";\n  album_image_url: string = \"\";\n  album_release_date: string = \"\";\n  duration_ms: string = \"\";\n  explicit: string = \"\";\n  popularity: string = \"\";\n  preview_url: string = \"\";\n  danceability: string = \"\";\n  energy: string = \"\";\n  key: string = \"\";\n  loudness: string = \"\";\n  mode: string = \"\";\n  speechiness: string = \"\";\n  acousticness: string = \"\";\n  instrumentalness: string = \"\";\n  liveness: string = \"\";\n  valence: string = \"\";\n  tempo: string = \"\";\n  time_signature: string = \"\";\n  artist_followers: string = \"\";\n  artist_genres: string = \"\";\n  artist_popularity: string = \"\";\n  track_id: string = \"\";\n  [s: string]: string | (() => number) | (() => string[]);\n\n  constructor(rawRow: d3.DSVRowString) {\n    for (const i in rawRow) this[i] = rawRow[i] ?? \"\";\n  }\n\n  year(): number {\n    return Number(this.album_release_date.slice(0, 4));\n  }\n\n  decade(): number {\n    return this.year() - (this.year() % 10);\n  }\n\n  genres(): string[] {\n    return this.artist_genres // This field appears to contain a json array of strings,\n      .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n      .split(\",\")\n      .map((genre_name) => genre_name.trim())\n      .filter((genre_name) => genre_name.length > 0);\n  }\n}\n\nexport function useCsvData() {\n  const [dataBytes, setDataBytes] = useState(\n    sessionStorage.getItem(\"dataBytes\")\n  );\n  useEffect(() => {\n    if ((dataBytes?.length ?? 0) > 0) return;\n    fetch(dataSrc)\n      .then((resp) => resp.text())\n      .then((data) => {\n        if (data) {\n          setDataBytes(data);\n          sessionStorage.setItem(\"dataBytes\", data);\n        }\n      });\n  });\n  return dataBytes;\n}\n","import * as d3 from \"d3\";\nimport { intersection, isEmpty, uniq } from \"lodash/fp\";\nimport { useState } from \"react\";\nimport { CsvRow, useCsvData } from \"./CsvRow\";\nimport { Filter } from \"./Filter\";\n\nexport const AudioFeatures: AudioFeature[] = [\n  \"danceability\",\n  \"energy\",\n  \"speechiness\",\n  \"acousticness\",\n  \"instrumentalness\",\n  \"liveness\",\n  \"valence\",\n];\n\nexport type AudioFeature =\n  | \"danceability\"\n  | \"energy\"\n  | \"speechiness\"\n  | \"acousticness\"\n  | \"instrumentalness\"\n  | \"liveness\"\n  | \"valence\";\n\nexport const AudioFeatureDefinitions = Object.freeze({\n  danceability:\n    \"Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity. A value of 0.0 is least danceable and 1.0 is most danceable.\",\n  energy:\n    \"Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy. For example, death metal has high energy, while a Bach prelude scores low on the scale. Perceptual features contributing to this attribute include dynamic range, perceived loudness, timbre, onset rate, and general entropy.\",\n  speechiness:\n    \"Speechiness detects the presence of spoken words in a track. The more exclusively speech-like the recording (e.g. talk show, audio book, poetry), the closer to 1.0 the attribute value. Values above 0.66 describe tracks that are probably made entirely of spoken words. Values between 0.33 and 0.66 describe tracks that may contain both music and speech, either in sections or layered, including such cases as rap music. Values below 0.33 most likely represent music and other non-speech-like tracks.\",\n  acousticness:\n    \"A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic.\",\n  instrumentalness:\n    'Predicts whether a track contains no vocals. \"Ooh\" and \"aah\" sounds are treated as instrumental in this context. Rap or spoken word tracks are clearly \"vocal\". The closer the instrumentalness value is to 1.0, the greater likelihood the track contains no vocal content. Values above 0.5 are intended to represent instrumental tracks, but confidence is higher as the value approaches 1.0.',\n  liveness:\n    \"Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live. A value above 0.8 provides strong likelihood that the track is live.\",\n  valence:\n    \"A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. Tracks with high valence sound more positive (e.g. happy, cheerful, euphoric), while tracks with low valence sound more negative (e.g. sad, depressed, angry).\",\n});\n\nexport interface ArtistsVisRow {\n  decade: number;\n  artist: string;\n  count: number;\n  distinctArtists: number;\n  genres: string[];\n}\n\nexport interface FeaturesRow {\n  year: number;\n  decade: number;\n  feature_name: string;\n  value: number;\n  genres: string[];\n}\n\nexport function useData(): Dataset | undefined {\n  const dataBytes = useCsvData();\n  const [dataset, setDataset] = useState<Dataset | undefined>(undefined);\n  if (dataBytes && dataset?.dataBlob !== dataBytes)\n    setDataset(new Dataset(dataBytes));\n  return dataset;\n}\n\nexport class Dataset {\n  readonly dataBlob: string;\n  readonly rows: CsvRow[];\n  readonly genres: string[];\n  readonly genreCounts: Map<string, number>;\n\n  private filterCache = new Map<string, CsvRow[]>();\n\n  constructor(dataBlob: string) {\n    const rows = d3.csvParse(dataBlob).map((rawRow) => new CsvRow(rawRow));\n    const genres = rows.flatMap((r) => r.genres());\n\n    this.dataBlob = dataBlob;\n    this.rows = rows;\n\n    this.genreCounts = genres.reduce(\n      (counter, genre) => counter.set(genre, 1 + (counter.get(genre) ?? 0)),\n      new Map<string, number>()\n    );\n\n    this.genres = uniq(genres).sort((aName, bName) => {\n      const aCount = this.genreCounts.get(aName) ?? 0;\n      const bCount = this.genreCounts.get(bName) ?? 0;\n      if (aCount === bCount) return aName.localeCompare(bName);\n      return aCount - bCount;\n    });\n  }\n\n  selectCSVRows(filter: Filter): CsvRow[] {\n    const selectedGenres = filter.genreToggles.selection();\n    return this.rows\n      .filter((r) => r.year() >= filter.yearStart)\n      .filter((r) => r.year() <= filter.yearEnd)\n      .filter(\n        (row) =>\n          isEmpty(selectedGenres) ||\n          intersection(selectedGenres, row.genres()).length > 0\n      );\n  }\n\n  unpivotFeatures(filter: Filter): FeaturesRow[] {\n    const selectedFeatures = filter.featureToggles.selection();\n    if (isEmpty(selectedFeatures)) selectedFeatures.push(...AudioFeatures);\n    return this.selectCSVRows(filter).flatMap((r) => {\n      return selectedFeatures.map<FeaturesRow>((feature_name) => ({\n        year: r.year(),\n        decade: r.decade(),\n        feature_name: feature_name,\n        value: r[feature_name] ? Number(r[feature_name]) : 0,\n        genres: r.genres(),\n      }));\n    });\n  }\n\n  toArtistsVisRow(filter: Filter): ArtistsVisRow[] {\n    const data = this.selectCSVRows(filter).map((r) => ({\n      artist: r.artist,\n      year: r.year(),\n      decade: r.decade(),\n      genres: r.genres(),\n    }));\n\n    const grouping = d3.group(\n      data,\n      (r) => r.decade,\n      (r) => r.artist\n    );\n\n    return Array.from(grouping).flatMap(([decade, decadeGrouping]) => {\n      const rollup = Array.from(decadeGrouping).map(\n        ([artist, artistGrouping]) => ({\n          decade: decade,\n          artist: artist,\n          count: artistGrouping.length,\n          distinctArtists: 1,\n          genres: artistGrouping.flatMap((r) => r.genres),\n        })\n      );\n\n      rollup.push({\n        decade: decade,\n        artist: \"\",\n        count: rollup.reduce((sum, g) => sum + g.count, 0),\n        distinctArtists: rollup.length,\n        genres: rollup.flatMap((r) => r.genres),\n      });\n      return rollup;\n    });\n  }\n}\n","import { Checkbox } from \"@mui/material\";\nimport React from \"react\";\n\nexport class Toggles extends Map<string, boolean> {\n  selected(name: string): boolean {\n    return this.get(name) ?? false;\n  }\n\n  selection(): string[] {\n    return Array.from(this.keys()).filter((name) => this.selected(name));\n  }\n}\n\nexport function ToggleSwitch(props: {\n  name: string;\n  toggles: Toggles;\n  setToggles: (val: Toggles) => void;\n}) {\n  return (\n    <Checkbox\n      checked={props.toggles.get(props.name) ?? false}\n      onChange={(e) => {\n        const newToggles = new Toggles(props.toggles);\n        newToggles.set(props.name, e.target.checked);\n        props.setToggles(newToggles);\n      }}\n    />\n  );\n}\n","import { FormControlLabel, Stack, Tooltip } from \"@mui/material\";\nimport { isEmpty } from \"lodash/fp\";\nimport { useState } from \"react\";\nimport {\n  AudioFeature,\n  AudioFeatureDefinitions,\n  AudioFeatures,\n} from \"../data/Dataset\";\nimport { Toggles, ToggleSwitch } from \"./Toggles\";\n\nexport function useFeatureToggles(): [Toggles, (val: Toggles) => void] {\n  const [toggles, setToggles] = useState(new Toggles());\n  if (isEmpty(toggles.selection())) {\n    const newToggles = new Toggles();\n    AudioFeatures.forEach((name) => newToggles.set(name, true));\n    setToggles(newToggles);\n  }\n  return [toggles, setToggles];\n}\n\nexport function SelectFeature(props: {\n  toggles: Toggles;\n  setToggles: (val: Toggles) => void;\n}) {\n  const label = (name: AudioFeature) => (\n    <Tooltip title={AudioFeatureDefinitions[name]} placement=\"right\">\n      <span>{name}</span>\n    </Tooltip>\n  );\n\n  return (\n    <Stack>\n      <h3>Selected Features</h3>\n      {AudioFeatures.map((name: AudioFeature) => (\n        <FormControlLabel\n          key={name}\n          control={ToggleSwitch({ ...props, name })}\n          label={label(name)}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import {\n  Box,\n  FormControlLabel,\n  FormGroup,\n  Stack,\n  TextField,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { Toggles, ToggleSwitch } from \"./Toggles\";\n\nexport function SelectGenre(props: {\n  toggles: Toggles;\n  setToggles: (val: Toggles) => void;\n  options: string[];\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const matches = props.options\n    .filter((name) => name.toLowerCase().includes(search))\n    .slice(0, 10);\n\n  const selectedToggles = props.toggles\n    .selection()\n    .map((name) => (\n      <FormControlLabel\n        key={name}\n        control={ToggleSwitch({ ...props, name })}\n        label={name}\n      />\n    ));\n\n  return (\n    <Stack>\n      <h3>Selected Genres</h3>\n      {props.toggles.selection().length === 0 ? (\n        <em>all genres</em>\n      ) : (\n        selectedToggles\n      )}\n      <FormGroup>\n        <TextField\n          label=\"search genres\"\n          variant=\"standard\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </FormGroup>\n      <h4>\n        Matches ({matches.length}/{props.options.length})\n      </h4>\n      <Box>\n        <FormGroup>\n          {matches.map((name) => (\n            <FormControlLabel\n              key={name}\n              label={name}\n              control={ToggleSwitch({ ...props, name })}\n            />\n          ))}\n        </FormGroup>\n      </Box>\n    </Stack>\n  );\n}\n","import { Toggles } from \"../components/Toggles\";\n\nconst minYear = 1950;\nconst maxYear = 2019;\n\nexport interface FilterProps {\n  genreToggles: Toggles;\n  featureToggles: Toggles;\n  yearStart?: number;\n  yearEnd?: number;\n}\n\nexport class Filter {\n  genreToggles: Toggles;\n  featureToggles: Toggles;\n  yearStart: number;\n  yearEnd: number;\n\n  constructor(props: FilterProps) {\n    this.yearStart = props.yearStart ?? minYear;\n    this.yearStart = this.yearStart > minYear ? this.yearStart : minYear;\n    this.yearEnd = props.yearStart ?? maxYear;\n    this.yearEnd = this.yearEnd < maxYear ? this.yearEnd : maxYear;\n    this.genreToggles = props.genreToggles;\n    this.featureToggles = props.featureToggles;\n  }\n}\n","import { Container, Grid, List, ListItem, Stack, Switch } from \"@mui/material\";\nimport React, { Suspense, useState } from \"react\";\nimport { ArtistsByDecadeChart } from \"./components/ArtistsByDecadeChart\";\nimport { ArtistsSummaryChart } from \"./components/ArtistsSummaryChart\";\nimport { FeaturesAreaChart } from \"./components/FeaturesAreaChart\";\nimport { FeaturesDonutChart } from \"./components/FeaturesDonutChart\";\nimport { FeaturesRadarChart } from \"./components/FeaturesRadarChart\";\nimport { SelectFeature, useFeatureToggles } from \"./components/SelectFeature\";\nimport { SelectGenre } from \"./components/SelectGenre\";\nimport { Toggles } from \"./components/Toggles\";\nimport { useData } from \"./data/Dataset\";\nimport { Filter } from \"./data/Filter\";\n\nconst loadingMessage = <p>Loading...</p>;\n\nfunction App() {\n  const [genreToggles, setGenreToggles] = useState(new Toggles());\n  const [featureToggles, setFeatureToggles] = useFeatureToggles();\n  const [yearStart] = useState<number | undefined>(undefined);\n  const [yearEnd] = useState<number | undefined>(undefined);\n\n  const [showVariationAreaVis, setShowVariationAreaVis] = useState(true);\n  const [showVariationsRadarVis, setShowVariationsRadarVis] = useState(false);\n  const [showTopArtistsOverallBar, setShowTopArtistsOverallBar] =\n    useState(false);\n  const [showTopArtistsByDecadeBar, setShowTopArtistsByDecadeBars] =\n    useState(false);\n\n  const dataset = useData();\n  if (!dataset) return loadingMessage;\n  const filter = new Filter({\n    yearStart,\n    yearEnd,\n    featureToggles,\n    genreToggles,\n  });\n\n  return (\n    <Suspense fallback={loadingMessage}>\n      <Container maxWidth={\"xl\"}>\n        <Grid container columnSpacing={2}>\n          <Grid item xs={2}>\n            <Grid\n              container\n              style={{\n                overflow: \"auto\",\n                width: 200,\n                height: \"100vh\",\n                position: \"fixed\",\n              }}\n            >\n              <SelectFeature\n                toggles={featureToggles}\n                setToggles={setFeatureToggles}\n              />\n              <SelectGenre\n                toggles={genreToggles}\n                setToggles={setGenreToggles}\n                options={dataset.genres.reverse()}\n              />\n            </Grid>\n          </Grid>\n          <Grid item xs={10}>\n            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n              <h1>Visualizing Audio Features over the Decades</h1>\n              <em>\n                Created by Jackson Argo, Matt Kinkley, and Erick Martinez.\n              </em>\n            </Grid>\n            <FeaturesDonutChart\n              hidden={true}\n              dataset={dataset}\n              filter={filter}\n              height={300}\n              width={800}\n            />\n            <h2>Variation in Features</h2>\n            <Switch\n              checked={showVariationAreaVis}\n              onChange={(e) => {\n                setShowVariationAreaVis(e.target.checked);\n              }}\n            />\n            <FeaturesAreaChart\n              show={showVariationAreaVis}\n              dataset={dataset}\n              filter={filter}\n              height={300}\n              width={800}\n            />\n            <h2>Variation in Features Radar</h2>\n            <Switch\n              checked={showVariationsRadarVis}\n              onChange={(e) => {\n                setShowVariationsRadarVis(e.target.checked);\n              }}\n            />\n            <FeaturesRadarChart\n              show={showVariationsRadarVis}\n              dataset={dataset}\n              filter={filter}\n              height={400}\n              width={400}\n              padding={40}\n            />\n            <h2>Count of Top Artists</h2>\n            <Switch\n              checked={showTopArtistsOverallBar}\n              onChange={(e) => {\n                setShowTopArtistsOverallBar(e.target.checked);\n              }}\n            />\n            <ArtistsSummaryChart\n              show={showTopArtistsOverallBar}\n              dataset={dataset}\n              filter={filter}\n              height={300}\n              width={800}\n              margin={{ left: 50, top: 50, right: 20, bottom: 20 }}\n            />\n            <h2>Top Artists by Decade</h2>\n            <Switch\n              checked={showTopArtistsByDecadeBar}\n              onChange={(e) => {\n                setShowTopArtistsByDecadeBars(e.target.checked);\n              }}\n            />\n            <ArtistsByDecadeChart\n              show={showTopArtistsByDecadeBar}\n              dataset={dataset}\n              filter={filter}\n              topN={10}\n              height={300}\n              width={800}\n            />\n          </Grid>\n          <Grid item xs={12}>\n            <Grid container justifyContent={\"center\"}>\n              <Grid item>\n                <Stack spacing={{ xs: 3 }}>\n                  <List>\n                    <ListItem>\n                      <a href=\"https://developer.spotify.com/documentation/web-api/reference/#/operations/get-audio-features\">\n                        Spotify's Audio Features API Docs\n                      </a>\n                    </ListItem>\n                  </List>\n                </Stack>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Container>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}