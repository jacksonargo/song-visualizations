{"version":3,"sources":["FeatureByGenreSpec.ts","FeaturesByGenreVis.tsx"],"names":["FeaturesByGenreSpec","title","data","genres","yearStart","yearEnd","height","width","$schema","mark","type","values","filter","row","length","name","includes","r","year","encoding","x","field","axis","format","y","aggregate","stack","color","FeaturesByGenreVis","props","selectedGenres","Array","from","genreToggles","keys","get","Box","GenreVis","baseTitle","dataset","toGenreVisData","replace","c","toUpperCase","VegaLite","spec"],"mappings":"kNAGO,SAASA,EACdC,EACAC,EACAC,EACAC,EACAC,GAGoB,IAFpBC,EAEmB,uDAFF,IACjBC,EACmB,uDADH,IAEhB,MAAO,CACLC,QAAS,kDACTC,KAAM,CAAEC,KAAM,QACdT,MAAOA,EACPM,MAAOA,EACPD,OAAQA,EACRJ,KAAM,CACJS,OAAQT,EACLU,QAAO,SAACC,GACP,OAAsB,IAAlBV,EAAOW,QACJD,EAAIV,OAAOS,QAAO,SAACG,GAAD,cAAUZ,QAAV,IAAUA,OAAV,EAAUA,EAAQa,SAASD,MAAOD,OAAS,KAErEF,QAAO,SAACK,GAAD,OAAOA,EAAEC,MAAQd,KACxBQ,QAAO,SAACK,GAAD,OAAOA,EAAEC,MAAQb,MAE7Bc,SAAU,CACRC,EAAG,CACDC,MAAO,OACPX,KAAM,eACNT,MAAO,OACPqB,KAAM,CAAEC,OAAQ,MAElBC,EAAG,CACDC,UAAW,MACXJ,MAAO,QACPpB,MAAO,oBACPyB,MAAO,aAETC,MAAO,CAAEN,MAAO,eAAgBX,KAAM,UAAWT,MAAO,mB,WCnCvD,SAAS2B,EAAmBC,GAIjC,IAAMC,EAAiBC,MAAMC,KAAKH,EAAMI,aAAaC,QAAQtB,QAAO,SAACG,GAAD,OAClEc,EAAMI,aAAaE,IAAIpB,MAGzB,OACE,eAACqB,EAAA,EAAD,WACE,uDACA,cAACC,EAAD,CACEC,UAAW,GACXpC,KAAM2B,EAAMU,QAAQC,iBACpBrC,OAAQ2B,OAMhB,SAASO,EAASR,GAMd,IAAD,MACKzB,EAAS,UAAGyB,EAAMzB,iBAAT,QAAsB,EAC/BC,EAAO,UAAGwB,EAAMxB,eAAT,QAAoB,IAE7BJ,EAAQ4B,EAAMS,UAKlB,OAJIT,EAAM1B,QAAU0B,EAAM1B,OAAOW,OAAS,IACxCb,GAAS,MAAQ4B,EAAM1B,OAAO,GAAGsC,QAAQ,OAAO,SAACC,GAAD,OAAOA,EAAEC,kBACvDd,EAAM1B,QAAU0B,EAAM1B,OAAOW,OAAS,IAAGb,GAAS,gBAGpD,cAAC2C,EAAA,EAAD,CACEC,KAAM7C,EACJC,EACA4B,EAAM3B,KAFiB,UAGvB2B,EAAM1B,cAHiB,QAGP,GAChBC,EACAC,KAMOuB","file":"static/js/5.04c6bdc2.chunk.js","sourcesContent":["import { VisualizationSpec } from \"react-vega\";\nimport { GenreVisRow } from \"./Dataset\";\n\nexport function FeaturesByGenreSpec(\n  title: string,\n  data: GenreVisRow[],\n  genres: string[],\n  yearStart: number,\n  yearEnd: number,\n  height: number = 300,\n  width: number = 800\n): VisualizationSpec {\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    mark: { type: \"area\" },\n    title: title,\n    width: width,\n    height: height,\n    data: {\n      values: data\n        .filter((row) => {\n          if (genres.length === 0) return true;\n          return row.genres.filter((name) => genres?.includes(name)).length > 0;\n        })\n        .filter((r) => r.year >= yearStart)\n        .filter((r) => r.year <= yearEnd),\n    },\n    encoding: {\n      x: {\n        field: \"year\",\n        type: \"quantitative\",\n        title: \"Year\",\n        axis: { format: \"d\" },\n      },\n      y: {\n        aggregate: \"sum\",\n        field: \"value\",\n        title: \"Feature Dominance\",\n        stack: \"normalize\",\n      },\n      color: { field: \"feature_name\", type: \"nominal\", title: \"Audio Feature\" },\n    },\n  };\n}\n","import { Box, Grid } from \"@mui/material\";\nimport { VegaLite } from \"react-vega\";\nimport { Dataset, GenreVisRow } from \"./Dataset\";\nimport { FeaturesByGenreSpec } from \"./FeatureByGenreSpec\";\n\nexport function FeaturesByGenreVis(props: {\n  genreToggles: Map<string, boolean>;\n  dataset: Dataset;\n}) {\n  const selectedGenres = Array.from(props.genreToggles.keys()).filter((name) =>\n    props.genreToggles.get(name)\n  );\n\n  return (\n    <Box>\n      <h2>Variation in Features</h2>\n      <GenreVis\n        baseTitle={\"\"}\n        data={props.dataset.toGenreVisData()}\n        genres={selectedGenres}\n      />\n    </Box>\n  );\n}\n\nfunction GenreVis(props: {\n  baseTitle: string;\n  data: GenreVisRow[];\n  genres?: string[];\n  yearStart?: number;\n  yearEnd?: number;\n}) {\n  const yearStart = props.yearStart ?? 0;\n  const yearEnd = props.yearEnd ?? 3000;\n\n  let title = props.baseTitle;\n  if (props.genres && props.genres.length > 0)\n    title += \" | \" + props.genres[0].replace(/^\\w/, (c) => c.toUpperCase());\n  if (props.genres && props.genres.length > 1) title += \", and others\";\n\n  return (\n    <VegaLite\n      spec={FeaturesByGenreSpec(\n        title,\n        props.data,\n        props.genres ?? [],\n        yearStart,\n        yearEnd\n      )}\n    />\n  );\n}\n\nexport default FeaturesByGenreVis;\n"],"sourceRoot":""}