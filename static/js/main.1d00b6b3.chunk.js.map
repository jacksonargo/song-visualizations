{"version":3,"sources":["GenreToggles.tsx","SelectGenre.tsx","App.tsx","index.js","spotify_decades.csv","CsvRow.ts","Dataset.ts"],"names":["GenreToggles","props","toggle","name","Switch","value","genreToggles","get","onChange","e","newToggles","Map","set","target","checked","setGenreToggles","FormGroup","options","map","FormControlLabel","control","label","SelectGenre","useState","search","setSearch","filtered","filter","toLowerCase","includes","slice","uniq","selected","Grid","container","item","xs","TextField","variant","FeaturesByGenreVis","lazy","TopArtistsForTheDecadeVis","loadingMessage","App","dataBytes","useCsvData","dataset","Dataset","fromBlob","genres","reverse","selectedGenres","Array","from","keys","fallback","Container","style","textAlign","ReactDOM","render","StrictMode","document","getElementById","CsvRow","rawRow","i","artist","album_name","album_image_url","album_release_date","duration_ms","explicit","popularity","preview_url","danceability","energy","key","loudness","mode","speechiness","acousticness","instrumentalness","liveness","valence","tempo","time_signature","artist_followers","artist_genres","artist_popularity","track_id","this","sessionStorage","getItem","setDataBytes","useEffect","length","fetch","dataSrc","then","resp","text","data","setItem","audioFeatures","rows","genreCounts","flatMap","r","replaceAll","split","genre_name","trim","reduce","counter","genre","sort","aName","bName","aCount","bCount","localeCompare","year","feature_name","Number","blob","d3"],"mappings":"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","file":"static/js/main.1d00b6b3.chunk.js","sourcesContent":["import { FormControlLabel, FormGroup, Switch } from \"@mui/material\";\n\nexport function GenreToggles(props: {\n  genreToggles: Map<string, boolean>;\n  setGenreToggles: (val: Map<string, boolean>) => void;\n  options: string[];\n}) {\n  function toggle(name: string) {\n    return (\n      <Switch\n        value={props.genreToggles.get(name)}\n        onChange={(e) => {\n          const newToggles = new Map(props.genreToggles);\n          newToggles.set(name, e.target.checked);\n          props.setGenreToggles(newToggles);\n        }}\n      />\n    );\n  }\n\n  return (\n    <FormGroup>\n      {props.options.map((name) => (\n        <FormControlLabel key={name} control={toggle(name)} label={name} />\n      ))}\n    </FormGroup>\n  );\n}\n","import { Grid, TextField } from \"@mui/material\";\nimport { uniq } from \"lodash/fp\";\nimport { useState } from \"react\";\nimport { GenreToggles } from \"./GenreToggles\";\n\nexport function SelectGenre(props: {\n  genreToggles: Map<string, boolean>;\n  setGenreToggles: (val: Map<string, boolean>) => void;\n  options: string[];\n  selected: string[];\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const filtered = props.options\n    .filter((name) => name && name.toLowerCase().includes(search))\n    .slice(0, 10);\n  const options = uniq([...filtered, ...props.selected]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <TextField\n          label=\"search genres\"\n          variant=\"standard\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <h4>Top matches</h4>\n        <GenreToggles\n          genreToggles={props.genreToggles}\n          setGenreToggles={props.setGenreToggles}\n          options={options}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import { Box, Container, Grid } from \"@mui/material\";\nimport React, { lazy, Suspense, useState } from \"react\";\nimport { useCsvData } from \"./CsvRow\";\nimport { Dataset } from \"./Dataset\";\nimport { SelectGenre } from \"./SelectGenre\";\n\nconst FeaturesByGenreVis = lazy(() => import(\"./FeaturesByGenreVis\"));\nconst TopArtistsForTheDecadeVis = lazy(\n  () => import(\"./TopArtistsForTheDecadeVis\")\n);\n\nconst loadingMessage = <p>Loading...</p>;\n\nfunction App() {\n  const dataBytes = useCsvData();\n  const [genreToggles, setGenreToggles] = useState(new Map<string, boolean>());\n\n  if (!dataBytes) return loadingMessage;\n  const dataset = Dataset.fromBlob(dataBytes);\n  const options = dataset.genres.reverse();\n  const selectedGenres = Array.from(genreToggles.keys()).filter((name) =>\n    genreToggles.get(name)\n  );\n\n  return (\n    <Suspense fallback={loadingMessage}>\n      <Container>\n        <Grid container>\n          <Grid item xs={12}>\n            <h1 style={{ textAlign: \"center\" }}>Audio Features</h1>\n          </Grid>\n          <Grid item xs={2}>\n            <SelectGenre\n              genreToggles={genreToggles}\n              setGenreToggles={setGenreToggles}\n              options={options}\n              selected={selectedGenres}\n            />\n          </Grid>\n          <Grid item xs={10}>\n            <FeaturesByGenreVis dataset={dataset} genreToggles={genreToggles} />\n            <TopArtistsForTheDecadeVis genreToggles={genreToggles} />\n          </Grid>\n        </Grid>\n      </Container>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","export default __webpack_public_path__ + \"static/media/spotify_decades.d5ba62b9.csv\";","import * as d3 from \"d3\";\nimport { useEffect, useState } from \"react\";\nimport dataSrc from \"./spotify_decades.csv\";\n\nexport class CsvRow {\n  name: string = \"\";\n  artist: string = \"\";\n  album_name: string = \"\";\n  album_image_url: string = \"\";\n  album_release_date: string = \"\";\n  duration_ms: string = \"\";\n  explicit: string = \"\";\n  popularity: string = \"\";\n  preview_url: string = \"\";\n  danceability: string = \"\";\n  energy: string = \"\";\n  key: string = \"\";\n  loudness: string = \"\";\n  mode: string = \"\";\n  speechiness: string = \"\";\n  acousticness: string = \"\";\n  instrumentalness: string = \"\";\n  liveness: string = \"\";\n  valence: string = \"\";\n  tempo: string = \"\";\n  time_signature: string = \"\";\n  artist_followers: string = \"\";\n  artist_genres: string = \"\";\n  artist_popularity: string = \"\";\n  track_id: string = \"\";\n\n  [s: string]: string;\n\n  constructor(rawRow: d3.DSVRowString) {\n    for (const i in rawRow) this[i] = rawRow[i] ?? \"\";\n  }\n}\n\nexport function useCsvData() {\n  const [dataBytes, setDataBytes] = useState(\n    sessionStorage.getItem(\"dataBytes\")\n  );\n  useEffect(() => {\n    if ((dataBytes?.length ?? 0) > 0) return;\n    fetch(dataSrc)\n      .then((resp) => resp.text())\n      .then((data) => {\n        if (data) {\n          setDataBytes(data);\n          sessionStorage.setItem(\"dataBytes\", data);\n        }\n      });\n  });\n  return dataBytes;\n}\n","import * as d3 from \"d3\";\nimport { uniq } from \"lodash/fp\";\nimport { CsvRow } from \"./CsvRow\";\n\nconst audioFeatures = [\n  \"danceability\",\n  \"energy\",\n  \"speechiness\",\n  \"acousticness\",\n  \"instrumentalness\",\n  \"liveness\",\n  \"valence\",\n];\n\nexport interface GenreVisRow {\n  year: number;\n  feature_name: string;\n  value: number;\n  genres: string[];\n}\n\nexport class Dataset {\n  readonly rows: CsvRow[];\n  readonly genres: string[];\n  readonly genreCounts: Map<string, number>;\n\n  constructor(data: CsvRow[]) {\n    const genres = data.flatMap((r) =>\n      r.artist_genres // This field appears to contain a json array of strings,\n        .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n        .split(\",\")\n        .map((genre_name) => genre_name.trim())\n        .filter((genre_name) => genre_name.length > 0)\n    );\n\n    this.rows = data;\n\n    this.genreCounts = genres.reduce(\n      (counter, genre) => counter.set(genre, 1 + (counter.get(genre) ?? 0)),\n      new Map<string, number>()\n    );\n\n    this.genres = uniq(genres).sort((aName, bName) => {\n      const aCount = this.genreCounts.get(aName) ?? 0;\n      const bCount = this.genreCounts.get(bName) ?? 0;\n      if (aCount === bCount) return aName.localeCompare(bName);\n      return aCount - bCount;\n    });\n  }\n\n  static fromBlob(blob: string): Dataset {\n    return new Dataset(d3.csvParse(blob).map((rawRow) => new CsvRow(rawRow)));\n  }\n\n  toGenreVisData(): GenreVisRow[] {\n    return this.rows.flatMap((r) => {\n      const year = r.album_release_date.slice(0, 4);\n      return audioFeatures.map<GenreVisRow>((feature_name) => ({\n        year: Number(year),\n        feature_name: feature_name,\n        value: r[feature_name] ? Number(r[feature_name]) : 0,\n        genres: r.artist_genres // This field appears to contain a json array of strings,\n          .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n          .split(\",\")\n          .map((genre_name) => genre_name.trim())\n          .filter((genre_name) => genre_name.length > 0),\n      }));\n    });\n  }\n}\n"],"sourceRoot":""}