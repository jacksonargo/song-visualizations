{"version":3,"sources":["spotify_decades.csv","CsvRow.ts","Dataset.ts","GenreToggles.tsx","SelectGenre.tsx","App.tsx","index.js"],"names":["CsvRow","rawRow","i","name","artist","album_name","album_image_url","album_release_date","duration_ms","explicit","popularity","preview_url","danceability","energy","key","loudness","mode","speechiness","acousticness","instrumentalness","liveness","valence","tempo","time_signature","artist_followers","artist_genres","artist_popularity","track_id","this","Number","slice","year","replaceAll","split","map","genre_name","trim","filter","length","audioFeatures","Dataset","data","rows","genres","genreCounts","flatMap","r","reduce","counter","genre","set","get","Map","uniq","sort","aName","bName","aCount","bCount","localeCompare","props","selected","genreToggles","selectedGenres","yearStart","yearEnd","isEmpty","intersection","decade","grouping","d3","Array","from","decadeGrouping","rollup","artistGrouping","count","distinctArtists","push","sum","g","feature_name","value","blob","GenreToggleMap","keys","GenreToggles","toggle","Switch","onChange","e","newToggles","target","checked","setGenreToggles","FormGroup","options","FormControlLabel","control","label","SelectGenre","useState","search","setSearch","filtered","toLowerCase","includes","Grid","container","item","xs","TextField","variant","AudioFeaturesByGenreVis","lazy","TopArtistsForTheDecadeVis","TopArtistsByDecadeVis","loadingMessage","App","dataBytes","sessionStorage","getItem","setDataBytes","useEffect","fetch","dataSrc","then","resp","text","setItem","useCsvData","dataset","fromBlob","reverse","fallback","Container","style","textAlign","height","width","margin","left","top","right","bottom","topN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d75cd8e3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spotify_decades.d5ba62b9.csv\";","import * as d3 from \"d3\";\nimport { useEffect, useState } from \"react\";\nimport dataSrc from \"./spotify_decades.csv\";\n\nexport interface CsvRowSchema {\n  name?: string;\n  artist?: string;\n  album_name?: string;\n  album_image_url?: string;\n  album_release_date?: string;\n  duration_ms?: string;\n  explicit?: string;\n  popularity?: string;\n  preview_url?: string;\n  danceability?: string;\n  energy?: string;\n  key?: string;\n  loudness?: string;\n  mode?: string;\n  speechiness?: string;\n  acousticness?: string;\n  instrumentalness?: string;\n  liveness?: string;\n  valence?: string;\n  tempo?: string;\n  time_signature?: string;\n  artist_followers?: string;\n  artist_genres?: string;\n  artist_popularity?: string;\n  track_id?: string;\n  [s: string]: string | undefined;\n}\n\nexport class CsvRow {\n  name: string = \"\";\n  artist: string = \"\";\n  album_name: string = \"\";\n  album_image_url: string = \"\";\n  album_release_date: string = \"\";\n  duration_ms: string = \"\";\n  explicit: string = \"\";\n  popularity: string = \"\";\n  preview_url: string = \"\";\n  danceability: string = \"\";\n  energy: string = \"\";\n  key: string = \"\";\n  loudness: string = \"\";\n  mode: string = \"\";\n  speechiness: string = \"\";\n  acousticness: string = \"\";\n  instrumentalness: string = \"\";\n  liveness: string = \"\";\n  valence: string = \"\";\n  tempo: string = \"\";\n  time_signature: string = \"\";\n  artist_followers: string = \"\";\n  artist_genres: string = \"\";\n  artist_popularity: string = \"\";\n  track_id: string = \"\";\n  [s: string]: string | (() => number) | (() => string[]);\n\n  constructor(rawRow: d3.DSVRowString) {\n    for (const i in rawRow) this[i] = rawRow[i] ?? \"\";\n  }\n\n  year(): number {\n    return Number(this.album_release_date.slice(0, 4));\n  }\n\n  decade(): number {\n    return this.year() - (this.year() % 10);\n  }\n\n  genres(): string[] {\n    return this.artist_genres // This field appears to contain a json array of strings,\n      .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n      .split(\",\")\n      .map((genre_name) => genre_name.trim())\n      .filter((genre_name) => genre_name.length > 0);\n  }\n}\n\nexport function useCsvData() {\n  const [dataBytes, setDataBytes] = useState(\n    sessionStorage.getItem(\"dataBytes\")\n  );\n  useEffect(() => {\n    if ((dataBytes?.length ?? 0) > 0) return;\n    fetch(dataSrc)\n      .then((resp) => resp.text())\n      .then((data) => {\n        if (data) {\n          setDataBytes(data);\n          sessionStorage.setItem(\"dataBytes\", data);\n        }\n      });\n  });\n  return dataBytes;\n}\n","import * as d3 from \"d3\";\nimport { intersection, isEmpty, uniq } from \"lodash/fp\";\nimport { CsvRow } from \"./CsvRow\";\nimport { GenreToggleMap } from \"./GenreToggles\";\n\nconst audioFeatures = [\n  \"danceability\",\n  \"energy\",\n  \"speechiness\",\n  \"acousticness\",\n  \"instrumentalness\",\n  \"liveness\",\n  \"valence\",\n];\n\nexport interface UniqueArtistsRollup {\n  decade: number;\n  artist: string;\n  count: number;\n  distinctArtists: number;\n  genres: string[];\n}\n\nexport interface GenreVisRow {\n  year: number;\n  decade: number;\n  feature_name: string;\n  value: number;\n  genres: string[];\n}\n\nexport interface FilterProps {\n  genreToggles: GenreToggleMap;\n  yearStart?: number;\n  yearEnd?: number;\n}\n\nexport class Dataset {\n  readonly rows: CsvRow[];\n  readonly genres: string[];\n  readonly genreCounts: Map<string, number>;\n\n  constructor(data: CsvRow[]) {\n    this.rows = data;\n\n    const genres = data.flatMap((r) => r.genres());\n    this.genreCounts = genres.reduce(\n      (counter, genre) => counter.set(genre, 1 + (counter.get(genre) ?? 0)),\n      new Map<string, number>()\n    );\n\n    this.genres = uniq(genres).sort((aName, bName) => {\n      const aCount = this.genreCounts.get(aName) ?? 0;\n      const bCount = this.genreCounts.get(bName) ?? 0;\n      if (aCount === bCount) return aName.localeCompare(bName);\n      return aCount - bCount;\n    });\n  }\n\n  static fromBlob(blob: string): Dataset {\n    return new Dataset(d3.csvParse(blob).map((rawRow) => new CsvRow(rawRow)));\n  }\n\n  toUniqueArtistsRollup(props: {\n    yearStart: number;\n    yearEnd: number;\n    genreToggles: GenreToggleMap;\n  }): UniqueArtistsRollup[] {\n    const selected = props.genreToggles.selectedGenres();\n    const data = this.rows\n      .filter((r) => r.year() >= props.yearStart)\n      .filter((r) => r.year() <= props.yearEnd)\n      .filter(\n        (r) =>\n          isEmpty(selected) || intersection(selected, r.genres()).length > 0\n      )\n      .filter((r) => r.decade() > 0)\n      .map((r) => ({\n        artist: r.artist,\n        year: r.year(),\n        decade: r.decade(),\n        genres: r.genres(),\n      }));\n\n    const grouping = d3.group(\n      data,\n      (r) => r.decade,\n      (r) => r.artist\n    );\n\n    return Array.from(grouping).flatMap(([decade, decadeGrouping]) => {\n      const rollup = Array.from(decadeGrouping).map(\n        ([artist, artistGrouping]) => ({\n          decade: decade,\n          artist: artist,\n          count: artistGrouping.length,\n          distinctArtists: 1,\n          genres: artistGrouping.flatMap((r) => r.genres),\n        })\n      );\n\n      rollup.push({\n        decade: decade,\n        artist: \"\",\n        count: rollup.reduce((sum, g) => sum + g.count, 0),\n        distinctArtists: rollup.length,\n        genres: rollup.flatMap((r) => r.genres),\n      });\n\n      return rollup;\n    });\n  }\n\n  toGenreVisRow(props: {\n    yearStart: number;\n    yearEnd: number;\n    genreToggles: GenreToggleMap;\n  }): GenreVisRow[] {\n    const selected = props.genreToggles.selectedGenres();\n    return this.rows\n      .filter((r) => r.year() >= props.yearStart)\n      .filter((r) => r.year() <= props.yearEnd)\n      .filter(\n        (r) =>\n          isEmpty(selected) || intersection(selected, r.genres()).length > 0\n      )\n      .flatMap((r) => {\n        return audioFeatures.map<GenreVisRow>((feature_name) => ({\n          year: r.year(),\n          decade: r.decade(),\n          feature_name: feature_name,\n          value: r[feature_name] ? Number(r[feature_name]) : 0,\n          genres: r.genres(),\n        }));\n      });\n  }\n}\n","import { FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport React from \"react\";\n\nexport class GenreToggleMap extends Map<string, boolean> {\n  selected(name: string): boolean {\n    return this.get(name) ?? false;\n  }\n\n  selectedGenres(): string[] {\n    return Array.from(this.keys()).filter((name) => this.selected(name));\n  }\n}\n\nexport function GenreToggles(props: {\n  genreToggles: GenreToggleMap;\n  setGenreToggles: (val: GenreToggleMap) => void;\n  options: string[];\n}) {\n  function toggle(name: string) {\n    return (\n      <Switch\n        value={props.genreToggles.get(name)}\n        onChange={(e) => {\n          const newToggles = new GenreToggleMap(props.genreToggles);\n          newToggles.set(name, e.target.checked);\n          props.setGenreToggles(newToggles);\n        }}\n      />\n    );\n  }\n\n  return (\n    <FormGroup>\n      {props.options.map((name) => (\n        <FormControlLabel key={name} control={toggle(name)} label={name} />\n      ))}\n    </FormGroup>\n  );\n}\n","import { Grid, TextField } from \"@mui/material\";\nimport { uniq } from \"lodash/fp\";\nimport { useState } from \"react\";\nimport { GenreToggleMap, GenreToggles } from \"./GenreToggles\";\n\nexport function SelectGenre(props: {\n  genreToggles: GenreToggleMap;\n  setGenreToggles: (val: GenreToggleMap) => void;\n  options: string[];\n  selected: string[];\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const filtered = props.options\n    .filter((name) => name && name.toLowerCase().includes(search))\n    .slice(0, 10);\n  const options = uniq([...filtered, ...props.selected]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <TextField\n          label=\"search genres\"\n          variant=\"standard\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <h4>Top matches</h4>\n        <GenreToggles\n          genreToggles={props.genreToggles}\n          setGenreToggles={props.setGenreToggles}\n          options={options}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import { Container, Grid } from \"@mui/material\";\nimport React, { lazy, Suspense, useState } from \"react\";\nimport { useCsvData } from \"./CsvRow\";\nimport { Dataset } from \"./Dataset\";\nimport { GenreToggleMap } from \"./GenreToggles\";\nimport { SelectGenre } from \"./SelectGenre\";\n\nconst AudioFeaturesByGenreVis = lazy(() => import(\"./FeaturesByGenreVis\"));\nconst TopArtistsForTheDecadeVis = lazy(\n  () => import(\"./TopArtistsPerDecadeBarsVis\")\n);\nconst TopArtistsByDecadeVis = lazy(\n  () => import(\"./TopArtistsByDecadeDonutSpec\")\n);\n\nconst loadingMessage = <p>Loading...</p>;\n\nfunction App() {\n  const dataBytes = useCsvData();\n  const [genreToggles, setGenreToggles] = useState(new GenreToggleMap());\n\n  if (!dataBytes) return loadingMessage;\n  const dataset = Dataset.fromBlob(dataBytes);\n  const options = dataset.genres.reverse();\n  const selectedGenres = Array.from(genreToggles.keys()).filter((name) =>\n    genreToggles.get(name)\n  );\n\n  return (\n    <Suspense fallback={loadingMessage}>\n      <Container>\n        <Grid container>\n          <Grid item xs={12}>\n            <h1 style={{ textAlign: \"center\" }}>Audio Features</h1>\n          </Grid>\n          <Grid item xs={2}>\n            <SelectGenre\n              genreToggles={genreToggles}\n              setGenreToggles={setGenreToggles}\n              options={options}\n              selected={selectedGenres}\n            />\n          </Grid>\n          <Grid item xs={10}>\n            <h2>Variation in Features</h2>\n            <AudioFeaturesByGenreVis\n              dataset={dataset}\n              genreToggles={genreToggles}\n              height={300}\n              width={800}\n            />\n            <h2>Count of Top Artists</h2>\n            <TopArtistsForTheDecadeVis\n              dataset={dataset}\n              genreToggles={genreToggles}\n              height={300}\n              width={800}\n              margin={{ left: 50, top: 50, right: 20, bottom: 20 }}\n            />\n            <h2>Top Artists by Decade</h2>\n            <TopArtistsByDecadeVis\n              dataset={dataset}\n              genreToggles={genreToggles}\n              topN={10}\n              height={300}\n              width={800}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}