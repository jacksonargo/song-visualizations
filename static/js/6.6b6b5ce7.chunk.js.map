{"version":3,"sources":["DataFilter.ts","TopArtistsByDecadeDonutSpec.tsx"],"names":["DataFilter","props","genreToggles","yearStart","yearEnd","this","TopArtistsByDecadeVis","rollup","dataset","toUniqueArtistsRollup","filter","r","artist","decadeGrouping","d3","decade","initSummary","name","distinctArtists","genres","count","summarize","a","b","uniq","artistsSummary","topArtists","Array","from","entries","forEach","sorted","sort","reverse","decadeTopArtists","slice","topN","summaryTop","reduce","summaryOthers","push","decades","map","container","item","xs","md","width","spec","TopArtistsByDecadeDonutSpec","data","TopArtistsByDecadeBarsSpec","radius","innerRadius","textRadius","$schema","layer","mark","type","tooltip","padAngle","encoding","theta","field","stack","color","text","values","height","x","axis","title","y"],"mappings":"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","file":"static/js/6.6b6b5ce7.chunk.js","sourcesContent":["import { GenreToggleMap } from \"./GenreToggles\";\n\nexport interface DataFilterProps {\n  genreToggles: GenreToggleMap;\n  yearStart?: number;\n  yearEnd?: number;\n}\n\nexport class DataFilter {\n  genreToggles: GenreToggleMap;\n  yearStart: number;\n  yearEnd: number;\n  constructor(props: DataFilterProps) {\n    this.yearStart = props.yearStart ?? 1950;\n    this.yearStart = this.yearStart > 1950 ? this.yearStart : 1950;\n    this.yearEnd = props.yearStart ?? 2025;\n    this.yearEnd = this.yearEnd < 2025 ? this.yearEnd : 2025;\n    this.genreToggles = props.genreToggles;\n  }\n}\n","import { Box, Grid } from \"@mui/material\";\nimport * as d3 from \"d3\";\nimport { uniq } from \"lodash/fp\";\nimport { VegaLite, VisualizationSpec } from \"react-vega\";\nimport { DataFilter, DataFilterProps } from \"./DataFilter\";\nimport { Dataset, UniqueArtistsRollup } from \"./Dataset\";\n\nexport interface TopArtistsByDecadeVisProps extends DataFilterProps {\n  dataset: Dataset;\n  innerRadius?: number;\n  padAngle?: number;\n  height: number;\n  width: number;\n  topN: number;\n}\n\nexport function TopArtistsByDecadeVis(props: TopArtistsByDecadeVisProps) {\n  const rollup = props.dataset\n    .toUniqueArtistsRollup(new DataFilter(props))\n    .filter((r) => r.artist !== \"\");\n  const decadeGrouping = d3.group(rollup, (r) => r.decade);\n\n  const initSummary = (decade: number, name: string): UniqueArtistsRollup => ({\n    decade: decade,\n    distinctArtists: 0,\n    artist: name,\n    genres: [] as string[],\n    count: 0,\n  });\n\n  const summarize = (a: UniqueArtistsRollup, b: UniqueArtistsRollup) => ({\n    ...a,\n    count: a.count + b.count,\n    distinctArtists: a.distinctArtists + b.distinctArtists,\n    genres: uniq([...a.genres, ...b.genres]),\n  });\n\n  const artistsSummary: UniqueArtistsRollup[] = [];\n  const topArtists: UniqueArtistsRollup[] = [];\n  Array.from(decadeGrouping.entries()).forEach(([decade, grouping]) => {\n    const sorted = grouping.sort((a, b) => a.count - b.count).reverse();\n\n    const decadeTopArtists = sorted.slice(0, props.topN);\n    const summaryTop = decadeTopArtists.reduce(\n      summarize,\n      initSummary(decade, `Top ${props.topN}\\nArtists`)\n    );\n\n    const decodeOther = sorted.slice(props.topN, -1);\n    const summaryOthers = decodeOther.reduce(\n      summarize,\n      initSummary(decade, \"Others\")\n    );\n\n    artistsSummary.push(summaryOthers);\n    artistsSummary.push(summaryTop);\n    topArtists.push(...decadeTopArtists);\n  });\n\n  const decades = uniq(topArtists.map((r) => r.decade)).sort();\n  return (\n    <Box>\n      {decades.map((decade) => (\n        <Grid key={decade} container>\n          <Grid item xs={12}>\n            <h3>{decade}</h3>\n          </Grid>\n          <Grid item md={6}>\n            <h4>\n              How many tops hits were produced by the top {props.topN} artists?\n            </h4>\n            <VegaLite\n              width={350}\n              spec={TopArtistsByDecadeDonutSpec({\n                ...props,\n                data: artistsSummary.filter((r) => r.decade === decade),\n              })}\n            />\n          </Grid>\n          <Grid item md={6}>\n            <VegaLite\n              width={350}\n              spec={TopArtistsByDecadeBarsSpec({\n                ...props,\n                data: topArtists.filter((r) => r.decade === decade),\n              })}\n            />\n          </Grid>\n        </Grid>\n      ))}\n    </Box>\n  );\n}\n\nexport default TopArtistsByDecadeVis;\n\nexport function TopArtistsByDecadeDonutSpec(props: {\n  data: UniqueArtistsRollup[];\n  height: number;\n  width: number;\n  innerRadius?: number;\n  radius?: number;\n  padAngle?: number;\n}): VisualizationSpec {\n  const radius = props.radius ?? 120;\n  const innerRadius = props.innerRadius ?? 60;\n  const textRadius = (radius - innerRadius) / 2 + innerRadius;\n  const padAngle = props.innerRadius ?? 0.01;\n\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    layer: [\n      {\n        mark: { type: \"arc\", tooltip: true, radius, innerRadius, padAngle },\n        encoding: {\n          theta: { type: \"quantitative\", field: \"count\", stack: true },\n          color: {\n            field: \"artist\",\n            type: \"nominal\",\n          },\n        },\n      },\n      {\n        mark: { type: \"text\", radius: textRadius },\n        encoding: {\n          theta: { type: \"quantitative\", field: \"count\", stack: true },\n          text: { type: \"nominal\", field: \"artist\" },\n        },\n      },\n    ],\n    data: { values: props.data },\n    width: props.width,\n    height: props.height,\n  };\n}\n\nexport function TopArtistsByDecadeBarsSpec(props: {\n  data: UniqueArtistsRollup[];\n  height: number;\n  width: number;\n}): VisualizationSpec {\n  return {\n    $schema: \"https://vega.github.io/schema/vega-lite/v5.json\",\n    mark: { type: \"bar\", tooltip: true },\n    data: { values: props.data },\n    width: props.width,\n    height: props.height,\n    encoding: {\n      x: {\n        field: \"count\",\n        type: \"quantitative\",\n        axis: { title: \"Number of Top Hits\" },\n      },\n      y: { field: \"artist\", type: \"nominal\" },\n      color: {\n        field: \"artist\",\n        type: \"nominal\",\n      },\n    },\n  };\n}\n"],"sourceRoot":""}