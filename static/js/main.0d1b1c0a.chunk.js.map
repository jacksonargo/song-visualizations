{"version":3,"sources":["DataFilter.ts","spotify_decades.csv","CsvRow.ts","Dataset.ts","GenreToggles.tsx","RadarChartSpec.ts","RadarChartVis.tsx","SelectGenre.tsx","App.tsx","index.js"],"names":["DataFilter","props","genreToggles","yearStart","yearEnd","this","CsvRow","rawRow","i","name","artist","album_name","album_image_url","album_release_date","duration_ms","explicit","popularity","preview_url","danceability","energy","key","loudness","mode","speechiness","acousticness","instrumentalness","liveness","valence","tempo","time_signature","artist_followers","artist_genres","artist_popularity","track_id","Number","slice","year","replaceAll","split","map","genre_name","trim","filter","length","audioFeatures","Dataset","data","rows","genres","genreCounts","flatMap","r","reduce","counter","genre","set","get","Map","uniq","sort","aName","bName","aCount","bCount","localeCompare","selected","selectedGenres","isEmpty","intersection","decade","grouping","d3","Array","from","decadeGrouping","rollup","artistGrouping","count","distinctArtists","push","sum","g","feature_name","value","blob","GenreToggleMap","keys","GenreToggles","toggle","Switch","onChange","e","newToggles","target","checked","setGenreToggles","FormGroup","options","FormControlLabel","control","label","RadarChartSpec","$schema","description","width","height","padding","autosize","type","contains","signals","update","values","source","transform","groupby","scales","range","signal","domain","field","zero","nice","domainMin","scheme","encode","enter","x","y","marks","zindex","facet","interpolate","stroke","scale","strokeWidth","fill","fillOpacity","text","align","baseline","x2","y2","test","fontWeight","RadarChartVis","show","Box","dataset","toGenreVisRow","category","val","decades","Grid","container","item","md","VegaLite","spec","SelectGenre","useState","search","setSearch","filtered","toLowerCase","includes","xs","TextField","variant","AudioFeaturesByGenreVis","lazy","TopArtistsForTheDecadeVis","TopArtistsByDecadeVis","loadingMessage","App","dataBytes","sessionStorage","getItem","setDataBytes","useEffect","fetch","dataSrc","then","resp","setItem","useCsvData","showVariationAreaVis","setShowVariationAreaVis","showVariationsRadarVis","setShowVariationsRadarVis","showTopArtistsOverallBar","setShowTopArtistsOverallBar","showTopArtistsByDecadeBar","setShowTopArtistsByDecadeBars","fromBlob","reverse","fallback","Container","style","textAlign","margin","left","top","right","bottom","topN","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d1b1c0a.chunk.js","sourcesContent":["import { GenreToggleMap } from \"./GenreToggles\";\n\nexport interface DataFilterProps {\n  genreToggles: GenreToggleMap;\n  yearStart?: number;\n  yearEnd?: number;\n}\n\nexport class DataFilter {\n  genreToggles: GenreToggleMap;\n  yearStart: number;\n  yearEnd: number;\n  constructor(props: DataFilterProps) {\n    this.yearStart = props.yearStart ?? 1950;\n    this.yearStart = this.yearStart > 1950 ? this.yearStart : 1950;\n    this.yearEnd = props.yearStart ?? 2025;\n    this.yearEnd = this.yearEnd < 2025 ? this.yearEnd : 2025;\n    this.genreToggles = props.genreToggles;\n  }\n}\n","export default __webpack_public_path__ + \"static/media/spotify_decades.d5ba62b9.csv\";","import * as d3 from \"d3\";\nimport { useEffect, useState } from \"react\";\nimport dataSrc from \"./spotify_decades.csv\";\n\nexport interface CsvRowSchema {\n  name?: string;\n  artist?: string;\n  album_name?: string;\n  album_image_url?: string;\n  album_release_date?: string;\n  duration_ms?: string;\n  explicit?: string;\n  popularity?: string;\n  preview_url?: string;\n  danceability?: string;\n  energy?: string;\n  key?: string;\n  loudness?: string;\n  mode?: string;\n  speechiness?: string;\n  acousticness?: string;\n  instrumentalness?: string;\n  liveness?: string;\n  valence?: string;\n  tempo?: string;\n  time_signature?: string;\n  artist_followers?: string;\n  artist_genres?: string;\n  artist_popularity?: string;\n  track_id?: string;\n  [s: string]: string | undefined;\n}\n\nexport class CsvRow {\n  name: string = \"\";\n  artist: string = \"\";\n  album_name: string = \"\";\n  album_image_url: string = \"\";\n  album_release_date: string = \"\";\n  duration_ms: string = \"\";\n  explicit: string = \"\";\n  popularity: string = \"\";\n  preview_url: string = \"\";\n  danceability: string = \"\";\n  energy: string = \"\";\n  key: string = \"\";\n  loudness: string = \"\";\n  mode: string = \"\";\n  speechiness: string = \"\";\n  acousticness: string = \"\";\n  instrumentalness: string = \"\";\n  liveness: string = \"\";\n  valence: string = \"\";\n  tempo: string = \"\";\n  time_signature: string = \"\";\n  artist_followers: string = \"\";\n  artist_genres: string = \"\";\n  artist_popularity: string = \"\";\n  track_id: string = \"\";\n  [s: string]: string | (() => number) | (() => string[]);\n\n  constructor(rawRow: d3.DSVRowString) {\n    for (const i in rawRow) this[i] = rawRow[i] ?? \"\";\n  }\n\n  year(): number {\n    return Number(this.album_release_date.slice(0, 4));\n  }\n\n  decade(): number {\n    return this.year() - (this.year() % 10);\n  }\n\n  genres(): string[] {\n    return this.artist_genres // This field appears to contain a json array of strings,\n      .replaceAll(/[[\\]'\"]/gi, \"\") // but it isn't valid json. Thankfully, it's easy to parse ourselves.\n      .split(\",\")\n      .map((genre_name) => genre_name.trim())\n      .filter((genre_name) => genre_name.length > 0);\n  }\n}\n\nexport function useCsvData() {\n  const [dataBytes, setDataBytes] = useState(\n    sessionStorage.getItem(\"dataBytes\")\n  );\n  useEffect(() => {\n    if ((dataBytes?.length ?? 0) > 0) return;\n    fetch(dataSrc)\n      .then((resp) => resp.text())\n      .then((data) => {\n        if (data) {\n          setDataBytes(data);\n          sessionStorage.setItem(\"dataBytes\", data);\n        }\n      });\n  });\n  return dataBytes;\n}\n","import * as d3 from \"d3\";\nimport { intersection, isEmpty, uniq } from \"lodash/fp\";\nimport { CsvRow } from \"./CsvRow\";\nimport { GenreToggleMap } from \"./GenreToggles\";\n\nconst audioFeatures = [\n  \"danceability\",\n  \"energy\",\n  \"speechiness\",\n  \"acousticness\",\n  \"instrumentalness\",\n  \"liveness\",\n  \"valence\",\n];\n\nexport interface UniqueArtistsRollup {\n  decade: number;\n  artist: string;\n  count: number;\n  distinctArtists: number;\n  genres: string[];\n}\n\nexport interface GenreVisRow {\n  year: number;\n  decade: number;\n  feature_name: string;\n  value: number;\n  genres: string[];\n}\n\nexport interface FilterProps {\n  genreToggles: GenreToggleMap;\n  yearStart?: number;\n  yearEnd?: number;\n}\n\nexport class Dataset {\n  readonly rows: CsvRow[];\n  readonly genres: string[];\n  readonly genreCounts: Map<string, number>;\n\n  constructor(data: CsvRow[]) {\n    this.rows = data;\n\n    const genres = data.flatMap((r) => r.genres());\n    this.genreCounts = genres.reduce(\n      (counter, genre) => counter.set(genre, 1 + (counter.get(genre) ?? 0)),\n      new Map<string, number>()\n    );\n\n    this.genres = uniq(genres).sort((aName, bName) => {\n      const aCount = this.genreCounts.get(aName) ?? 0;\n      const bCount = this.genreCounts.get(bName) ?? 0;\n      if (aCount === bCount) return aName.localeCompare(bName);\n      return aCount - bCount;\n    });\n  }\n\n  static fromBlob(blob: string): Dataset {\n    return new Dataset(d3.csvParse(blob).map((rawRow) => new CsvRow(rawRow)));\n  }\n\n  toUniqueArtistsRollup(props: {\n    yearStart: number;\n    yearEnd: number;\n    genreToggles: GenreToggleMap;\n  }): UniqueArtistsRollup[] {\n    const selected = props.genreToggles.selectedGenres();\n    const data = this.rows\n      .filter((r) => r.year() >= props.yearStart)\n      .filter((r) => r.year() <= props.yearEnd)\n      .filter(\n        (r) =>\n          isEmpty(selected) || intersection(selected, r.genres()).length > 0\n      )\n      .filter((r) => r.decade() > 0)\n      .map((r) => ({\n        artist: r.artist,\n        year: r.year(),\n        decade: r.decade(),\n        genres: r.genres(),\n      }));\n\n    const grouping = d3.group(\n      data,\n      (r) => r.decade,\n      (r) => r.artist\n    );\n\n    return Array.from(grouping).flatMap(([decade, decadeGrouping]) => {\n      const rollup = Array.from(decadeGrouping).map(\n        ([artist, artistGrouping]) => ({\n          decade: decade,\n          artist: artist,\n          count: artistGrouping.length,\n          distinctArtists: 1,\n          genres: artistGrouping.flatMap((r) => r.genres),\n        })\n      );\n\n      rollup.push({\n        decade: decade,\n        artist: \"\",\n        count: rollup.reduce((sum, g) => sum + g.count, 0),\n        distinctArtists: rollup.length,\n        genres: rollup.flatMap((r) => r.genres),\n      });\n\n      return rollup;\n    });\n  }\n\n  toGenreVisRow(props: {\n    yearStart: number;\n    yearEnd: number;\n    genreToggles: GenreToggleMap;\n  }): GenreVisRow[] {\n    const selected = props.genreToggles.selectedGenres();\n    return this.rows\n      .filter((r) => r.year() >= props.yearStart)\n      .filter((r) => r.year() <= props.yearEnd)\n      .filter(\n        (r) =>\n          isEmpty(selected) || intersection(selected, r.genres()).length > 0\n      )\n      .flatMap((r) => {\n        return audioFeatures.map<GenreVisRow>((feature_name) => ({\n          year: r.year(),\n          decade: r.decade(),\n          feature_name: feature_name,\n          value: r[feature_name] ? Number(r[feature_name]) : 0,\n          genres: r.genres(),\n        }));\n      });\n  }\n}\n","import { FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport React from \"react\";\n\nexport class GenreToggleMap extends Map<string, boolean> {\n  selected(name: string): boolean {\n    return this.get(name) ?? false;\n  }\n\n  selectedGenres(): string[] {\n    return Array.from(this.keys()).filter((name) => this.selected(name));\n  }\n}\n\nexport function GenreToggles(props: {\n  genreToggles: GenreToggleMap;\n  setGenreToggles: (val: GenreToggleMap) => void;\n  options: string[];\n}) {\n  function toggle(name: string) {\n    return (\n      <Switch\n        value={props.genreToggles.get(name)}\n        onChange={(e) => {\n          const newToggles = new GenreToggleMap(props.genreToggles);\n          newToggles.set(name, e.target.checked);\n          props.setGenreToggles(newToggles);\n        }}\n      />\n    );\n  }\n\n  return (\n    <FormGroup>\n      {props.options.map((name) => (\n        <FormControlLabel key={name} control={toggle(name)} label={name} />\n      ))}\n    </FormGroup>\n  );\n}\n","import { VisualizationSpec } from \"react-vega\";\n\nexport interface RadarChartData {\n  key: string;\n  value: number;\n  category: number;\n}\n\nexport function RadarChartSpec(props: {\n  data: RadarChartData[];\n  height: number;\n  width: number;\n  padding: number;\n}): VisualizationSpec {\n  // @ts-ignore\n  return {\n    $schema: \"https://vega.github.io/schema/vega/v5.json\",\n    description:\n      \"A radar chart example, showing multiple dimensions in a radial layout.\",\n    width: props.width,\n    height: props.height,\n    padding: props.padding,\n    autosize: { type: \"none\", contains: \"padding\" },\n    signals: [{ name: \"radius\", update: \"width / 2\" }],\n    data: [\n      {\n        name: \"table\",\n        values: props.data,\n      },\n      {\n        name: \"keys\",\n        source: \"table\",\n        transform: [\n          {\n            type: \"aggregate\",\n            groupby: [\"key\"],\n          },\n        ],\n      },\n    ],\n\n    scales: [\n      {\n        name: \"angular\",\n        type: \"point\",\n        //@ts-ignore\n        range: { signal: \"[-PI,PI]\" },\n        padding: 0.5,\n        domain: { data: \"table\", field: \"key\" },\n      },\n      {\n        name: \"radial\",\n        type: \"linear\",\n        range: { signal: \"[0, radius]\" },\n        zero: true,\n        nice: false,\n        domain: { data: \"table\", field: \"value\" },\n        domainMin: 0,\n      },\n      {\n        name: \"color\",\n        type: \"ordinal\",\n        domain: { data: \"table\", field: \"category\" },\n        range: { scheme: \"category10\" },\n      },\n    ],\n\n    encode: {\n      enter: {\n        x: { signal: \"radius\" },\n        y: { signal: \"radius\" },\n      },\n    },\n\n    marks: [\n      {\n        type: \"group\",\n        name: \"categories\",\n        zindex: 1,\n        from: {\n          facet: { data: \"table\", name: \"facet\", groupby: [\"category\"] },\n        },\n        marks: [\n          {\n            type: \"line\",\n            name: \"category-line\",\n            from: { data: \"facet\" },\n            encode: {\n              enter: {\n                interpolate: { value: \"linear-closed\" },\n                x: {\n                  signal:\n                    \"scale('radial', datum.value) * cos(scale('angular', datum.key))\",\n                },\n                y: {\n                  signal:\n                    \"scale('radial', datum.value) * sin(scale('angular', datum.key))\",\n                },\n                stroke: { scale: \"color\", field: \"category\" },\n                strokeWidth: { value: 1 },\n                fill: { scale: \"color\", field: \"category\" },\n                fillOpacity: { value: 0.1 },\n              },\n            },\n          },\n          {\n            type: \"text\",\n            name: \"value-text\",\n            from: { data: \"category-line\" },\n            encode: {\n              enter: {\n                x: { signal: \"datum.x\" },\n                y: { signal: \"datum.y\" },\n                text: { signal: \"datum.datum.value\" },\n                align: { value: \"center\" },\n                baseline: { value: \"middle\" },\n                fill: { value: \"black\" },\n              },\n            },\n          },\n        ],\n      },\n      {\n        type: \"rule\",\n        name: \"radial-grid\",\n        from: { data: \"keys\" },\n        zindex: 0,\n        encode: {\n          enter: {\n            x: { value: 0 },\n            y: { value: 0 },\n            x2: { signal: \"radius * cos(scale('angular', datum.key))\" },\n            y2: { signal: \"radius * sin(scale('angular', datum.key))\" },\n            stroke: { value: \"lightgray\" },\n            strokeWidth: { value: 1 },\n          },\n        },\n      },\n      {\n        type: \"text\",\n        name: \"key-label\",\n        from: { data: \"keys\" },\n        zindex: 1,\n        encode: {\n          enter: {\n            x: { signal: \"(radius + 5) * cos(scale('angular', datum.key))\" },\n            y: { signal: \"(radius + 5) * sin(scale('angular', datum.key))\" },\n            text: { field: \"key\" },\n            align: [\n              {\n                test: \"abs(scale('angular', datum.key)) > PI / 2\",\n                value: \"right\",\n              },\n              {\n                value: \"left\",\n              },\n            ],\n            baseline: [\n              {\n                test: \"scale('angular', datum.key) > 0\",\n                value: \"top\",\n              },\n              {\n                test: \"scale('angular', datum.key) == 0\",\n                value: \"middle\",\n              },\n              {\n                value: \"bottom\",\n              },\n            ],\n            fill: { value: \"black\" },\n            fontWeight: { value: \"bold\" },\n          },\n        },\n      },\n      {\n        type: \"line\",\n        name: \"outer-line\",\n        from: { data: \"radial-grid\" },\n        encode: {\n          enter: {\n            interpolate: { value: \"linear-closed\" },\n            x: { field: \"x2\" },\n            y: { field: \"y2\" },\n            stroke: { value: \"lightgray\" },\n            strokeWidth: { value: 1 },\n          },\n        },\n      },\n    ],\n  };\n}\n","import { Box, Grid } from \"@mui/material\";\nimport * as d3 from \"d3\";\nimport { VegaLite } from \"react-vega\";\nimport { DataFilter, DataFilterProps } from \"./DataFilter\";\nimport { Dataset } from \"./Dataset\";\nimport { RadarChartData, RadarChartSpec } from \"./RadarChartSpec\";\nimport { uniq } from \"lodash/fp\";\n\nexport interface RadarChartVisProps extends DataFilterProps {\n  height: number;\n  width: number;\n  dataset: Dataset;\n  padding: number;\n  show: boolean;\n}\n\nexport function RadarChartVis(props: RadarChartVisProps) {\n  if (!props.show) return <Box />;\n\n  const filter = new DataFilter(props);\n  const data = props.dataset.toGenreVisRow(filter).map<RadarChartData>((r) => ({\n    key: r.feature_name,\n    category: r.decade,\n    value: r.value,\n  }));\n\n  const rollup: RadarChartData[] = d3\n    .flatGroup(\n      data,\n      (r) => r.category,\n      (r) => r.key\n    )\n    .map(([category, key, grouping]) => ({\n      category,\n      key,\n      value: grouping.reduce((val, x) => val + x.value, 0),\n    }));\n\n  const decades = uniq(rollup.map((r) => r.category)).sort();\n  return (\n    <Box>\n      <Grid container>\n        {decades.map((decade) => (\n          <Grid key={decade} item md={6}>\n            <h3>{decade}</h3>\n            <VegaLite\n              spec={RadarChartSpec({\n                ...props,\n                data: rollup.filter((r) => decade === r.category),\n              })}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  );\n}\n","import { Grid, TextField } from \"@mui/material\";\nimport { uniq } from \"lodash/fp\";\nimport { useState } from \"react\";\nimport { GenreToggleMap, GenreToggles } from \"./GenreToggles\";\n\nexport function SelectGenre(props: {\n  genreToggles: GenreToggleMap;\n  setGenreToggles: (val: GenreToggleMap) => void;\n  options: string[];\n  selected: string[];\n}) {\n  const [search, setSearch] = useState(\"\");\n\n  const filtered = props.options\n    .filter((name) => name && name.toLowerCase().includes(search))\n    .slice(0, 10);\n  const options = uniq([...filtered, ...props.selected]);\n\n  return (\n    <Grid container>\n      <Grid item xs={12}>\n        <TextField\n          label=\"search genres\"\n          variant=\"standard\"\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </Grid>\n      <Grid item xs={12}>\n        <h4>Top matches</h4>\n        <GenreToggles\n          genreToggles={props.genreToggles}\n          setGenreToggles={props.setGenreToggles}\n          options={options}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import { Container, Grid, Switch } from \"@mui/material\";\nimport React, { lazy, Suspense, useState } from \"react\";\nimport { useCsvData } from \"./CsvRow\";\nimport { Dataset } from \"./Dataset\";\nimport { GenreToggleMap } from \"./GenreToggles\";\nimport { RadarChartVis } from \"./RadarChartVis\";\nimport { SelectGenre } from \"./SelectGenre\";\n\nconst AudioFeaturesByGenreVis = lazy(() => import(\"./FeaturesByGenreVis\"));\nconst TopArtistsForTheDecadeVis = lazy(\n  () => import(\"./TopArtistsPerDecadeBarsVis\")\n);\nconst TopArtistsByDecadeVis = lazy(\n  () => import(\"./TopArtistsByDecadeDonutSpec\")\n);\n\nconst loadingMessage = <p>Loading...</p>;\n\nfunction App() {\n  const dataBytes = useCsvData();\n  const [genreToggles, setGenreToggles] = useState(new GenreToggleMap());\n\n  const [showVariationAreaVis, setShowVariationAreaVis] = useState(true);\n  const [showVariationsRadarVis, setShowVariationsRadarVis] = useState(false);\n  const [showTopArtistsOverallBar, setShowTopArtistsOverallBar] =\n    useState(false);\n  const [showTopArtistsByDecadeBar, setShowTopArtistsByDecadeBars] =\n    useState(false);\n\n  if (!dataBytes) return loadingMessage;\n  const dataset = Dataset.fromBlob(dataBytes);\n  const options = dataset.genres.reverse();\n  const selectedGenres = Array.from(genreToggles.keys()).filter((name) =>\n    genreToggles.get(name)\n  );\n\n  return (\n    <Suspense fallback={loadingMessage}>\n      <Container>\n        <Grid container>\n          <Grid item xs={12}>\n            <h1 style={{ textAlign: \"center\" }}>Audio Features</h1>\n          </Grid>\n          <Grid item xs={2}>\n            <SelectGenre\n              genreToggles={genreToggles}\n              setGenreToggles={setGenreToggles}\n              options={options}\n              selected={selectedGenres}\n            />\n          </Grid>\n          <Grid item xs={10}>\n            <h2>Variation in Features</h2>\n            <Switch\n              checked={showVariationAreaVis}\n              onChange={(e) => {\n                setShowVariationAreaVis(e.target.checked);\n              }}\n            />\n            <AudioFeaturesByGenreVis\n              show={showVariationAreaVis}\n              dataset={dataset}\n              genreToggles={genreToggles}\n              height={300}\n              width={800}\n            />\n            <h2>Variation in Features Radar</h2>\n            <Switch\n              checked={showVariationsRadarVis}\n              onChange={(e) => {\n                setShowVariationsRadarVis(e.target.checked);\n              }}\n            />\n            <RadarChartVis\n              show={showVariationsRadarVis}\n              dataset={dataset}\n              genreToggles={genreToggles}\n              height={400}\n              width={400}\n              padding={40}\n            />\n            <h2>Count of Top Artists</h2>\n            <Switch\n              checked={showTopArtistsOverallBar}\n              onChange={(e) => {\n                setShowTopArtistsOverallBar(e.target.checked);\n              }}\n            />\n            <TopArtistsForTheDecadeVis\n              show={showTopArtistsOverallBar}\n              dataset={dataset}\n              genreToggles={genreToggles}\n              height={300}\n              width={800}\n              margin={{ left: 50, top: 50, right: 20, bottom: 20 }}\n            />\n            <h2>Top Artists by Decade</h2>\n            <Switch\n              checked={showTopArtistsByDecadeBar}\n              onChange={(e) => {\n                setShowTopArtistsByDecadeBars(e.target.checked);\n              }}\n            />\n            <TopArtistsByDecadeVis\n              show={showTopArtistsByDecadeBar}\n              dataset={dataset}\n              genreToggles={genreToggles}\n              topN={10}\n              height={300}\n              width={800}\n            />\n          </Grid>\n        </Grid>\n      </Container>\n    </Suspense>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}